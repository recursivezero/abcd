---
import Layout from "@/layouts/Base";
import Keyboard from "@/components/DrawKeyboard.astro";
import Help from "@/components/Help.astro";
---

<Layout meta={{ title: "Draw Keyboard" }}>
  <Fragment slot="header-right">
    <div class="settings-container">
      <div class="settings-toggle">
        <input type="checkbox" id="settingsToggle" class="settings-checkbox visually-hidden" />
        <label for="settingsToggle" class="settings-label control-button" title="Toggle Settings"> ‚öôÔ∏è </label>

      <div class="settings-panel" id="settingsPanel">
        <div class="controls-group">
          <div class="controls">
            <label for="toggleCase" class="control-item">
              <input type="checkbox" name="change_case" id="toggleCase" class="visually-hidden hidden" />
              <span
                id="text"
                class="control-btn"
                style="--bg-color: #6366f1; --hover-bg-color: #818cf8;"
                title="Toggle case"
                role="switch"
                aria-checked="false"
              >
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" class="icon">
                  <path stroke-linecap="round" stroke-linejoin="round" d="M16.862 4.487l1.687-1.688a1.875 1.875 0 112.652 2.652L10.582 16.07a4.5 4.5 0 01-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 011.13-1.897l8.932-8.931zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0115.75 21h-9.5A2.25 2.25 0 014 18.75V8.25A2.25 2.25 0 016.25 6H8" />
                  <path stroke-linecap="round" stroke-linejoin="round" d="M10 9l-1.5 3M7 9l-1.5 3M14 9l-1.5 3" />
                </svg>
                Toggle Case
              </span>
              <span class="control-label"></span>
            </label>

            <label for="toggleFont" class="control-item">
              <input type="checkbox" name="change_font" id="toggleFont" class="visually-hidden hidden" />
              <span id="font" class="control-button font-toggle" title="Change font" role="switch" aria-checked="false">
                T
              </span>
              <span class="control-label"></span>
            </label>

            <label for="toggleBg" class="control-item">
              <input type="checkbox" name="change_bg" id="toggleBg" class="visually-hidden hidden" />
              <span class="control-button bg-toggle" title="Toggle background" role="switch" aria-checked="false">
                üé®
              </span>
              <span class="control-label"></span>
            </label>
          </div>
        </div>
      </div>

      <Help
        title="Draw Keyboard"
        description="Draw letters on the keyboard by clicking and dragging through the keys. Use the controls to toggle case, font, and background."
      />
    </div>
  </Fragment>
  <Keyboard />
</Layout>

<style>
  .settings-container {
    position: relative;
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .settings-trigger {
    position: fixed;
    top: 82px;
    right: 32px;
    width: 60px;
    height: 60px;
    border-radius: 50%;
    background: var(--primary-color, #6366f1);
    border: none;
    cursor: pointer;
    box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1);
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    z-index: 1000;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .settings-trigger svg {
    width: 28px;
    height: 28px;
    color: white;
    transition: transform 0.3s ease;
  }

  .settings-trigger:hover {
    background: var(--accent6-color, #818cf8);
    transform: scale(1.05) rotate(45deg);
  }

  .settings-trigger:hover svg {
    transform: rotate(180deg);
  }

  .settings-trigger.active {
    transform: scale(1) rotate(180deg);
    background: var(--accent1-color, #f87171);
  }

  .settings-panel {
    display: none;
    position: absolute;
    top: 100%;
    right: 0;
    background: white;
    border: 1px solid #ddd;
    border-radius: 0.25rem;
    padding: 0.5rem;
    margin-top: 0.5rem;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    z-index: 10;
    min-width: 12rem;
  }

  .settings-panel:not(.active) {
    opacity: 0;
    pointer-events: none;
    transform: translateX(0);
  }

  .settings-panel.active {
    opacity: 1;
    pointer-events: auto;
    transform: translateX(-340px);
  }

  .controls-group {
    display: flex;
    flex-direction: column;
    gap: 16px;
  }

  .control-item {
    display: flex;
    align-items: center;
    gap: 10px;
    padding: 2px;
  }

  .control-label {
    font-size: 0.9rem;
    color: #333;
  }

  .control-btn {
    background: var(--bg-color);
    color: white;
    border: none;
    border-radius: 12px;
    padding: 12px 16px;
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    display: flex;
    align-items: center;
    justify-content: start;
    gap: 10px;
    font-weight: 600;
    font-size: 0.95rem;
    letter-spacing: 0.01em;
    width: 100%;
  }

  .control-btn:hover {
    background: var(--hover-bg-color);
    transform: translateY(-2px);
  }

  .control-btn:active {
    transform: translateY(0);
  }

  .icon {
    width: 20px;
    height: 20px;
    stroke-width: 1.5;
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const settingsToggle = document.getElementById("settingsToggle") as HTMLInputElement;
    const settingsPanel = settingsToggle.nextElementSibling!;

    // Close settings panel when clicking outside
    document.addEventListener("click", (event: any) => {
      if (!settingsToggle.contains(event.target) && !settingsPanel.contains(event.target)) {
        settingsToggle.checked = false;
      }
    });

    // Prevent panel from closing when clicking inside
    settingsPanel.addEventListener("click", (event) => {
      event.stopPropagation();
    });
  });
</script>
