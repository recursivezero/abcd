---
import BaseLayout from "@/layouts/Base";
import BackButton from "@/components/BackButton.astro";
import Help from "@/components/Help.astro";
import DownloadIcon from "@/assets/icons/download.svg";
import ResetIcon from "@/assets/icons/reset.svg";
import "@/assets/styles/quote-designer.css";
import SharePopover from "@/components/SharePopover.astro";

const pageTitle = "Quote Designer";
const pageDescription = "Design beautiful quotes with our advanced tool.";

const pageMeta = {
  title: pageTitle,
  description: pageDescription
};
---

<BaseLayout meta={pageMeta}>
  <Fragment slot="header-right">
    <div class="header-tools-wrapper"></div>
    <SharePopover />

    <Help
      title="Quote designer"
      description="Design beautiful quotes through this intuitive visual editor. You can customize the text, font, and background color. You can also change the alignment of the text."
    />
  </Fragment>

  <div class="header-controls">
    <BackButton />
    <div class="right-header-buttons">
      <button id="presetQuoteBtn" class="metallic-button header-tools-btn" aria-label="Get a Preset Quote">
        <span class="button-text-initial">P</span>
        <span class="button-text">Preset Quote</span>
      </button>

      <button
        id="editTextBtn"
        class="metallic-button header-tools-btn popover-trigger-btn"
        aria-label="Edit Text Settings"
        data-popover-target="editTextPopover"
      >
        <span class="button-text-initial">E</span>
        <span class="button-text">Edit Text</span>
      </button>
      <button
        id="backgroundBtn"
        class="metallic-button header-tools-btn popover-trigger-btn"
        aria-label="Background Settings"
        data-popover-target="backgroundPopover"
      >
        <span class="button-text-initial">B</span>
        <span class="button-text">Background</span>
      </button>
      <button
        id="textStyleBtn"
        class="metallic-button header-tools-btn popover-trigger-btn"
        aria-label="Text Style Settings"
        data-popover-target="textStylePopover"
      >
        <span class="button-text-initial">T</span>
        <span class="button-text">Text Style</span>
      </button>
      <button
        id="layoutBtn"
        class="metallic-button header-tools-btn popover-trigger-btn"
        aria-label="Layout Settings"
        data-popover-target="layoutPopover"
      >
        <span class="button-text-initial">L</span>
        <span class="button-text">Layout</span>
      </button>

      <button id="downloadBtn" class="metallic-button header-tools-btn" aria-label="Download Design">
        <DownloadIcon class="header-icon" />
        <span class="button-text">Download</span>
        <span class="loading-spinner" style="display: none;"></span>
      </button>

      <button id="resetBtn" class="metallic-button header-tools-btn" aria-label="Reset Design">
        <ResetIcon class="header-icon" />
        <span class="button-text">Reset</span>
        <span class="loading-spinner" style="display: none;"></span>
      </button>
    </div>
  </div>

  <div class="design-container">
    <div class="preview-panel">
      <div class="preview-container" id="previewContainer">
        <div id="aspectRatioWrapper" class="aspect-ratio-free">
          <div id="quotePreview">
            <div class="quote-text"></div>
            <div class="author-name"></div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div id="editTextPopover" class="design-tools-popover" aria-hidden="true">
    <details class="popover-details">
      <summary>Edit Text</summary>
      <div class="control-group">
        <label for="editQuote">Edit Quote:</label>
        <textarea id="editQuote" class="metallic-input" rows="3" aria-label="Edit Quote Text"></textarea>
        <div id="editWordCount" class="word-count">0 / 20 words</div>
        <label for="editAuthor">Edit Author:</label>
        <input type="text" id="editAuthor" class="metallic-input" aria-label="Edit Author Name" />
      </div>
    </details>
  </div>

  <div id="backgroundPopover" class="design-tools-popover" aria-hidden="true">
    <details class="popover-details">
      <summary>Background</summary>
      <div class="control-group">
        <label for="bgColor">Background Color:</label>
        <input
          type="color"
          id="bgColor"
          value="#000000"
          class="metallic-input color-input"
          aria-label="Background Color Picker"
        />
        <div class="control-group">
          <label for="bgImageUpload">Upload Background Image:</label>
          <input
            type="file"
            id="bgImageUpload"
            accept="image/*"
            class="metallic-input file-input"
            aria-label="Upload Background Image"
          />
        </div>
      </div>
      <div class="control-group">
        <label>Preset Background Images:</label>
        <div class="background-image-selector">
          <div class="background-image-grid">
            <div
              class="background-image-option"
              data-src="/assets/icons/background1.svg"
              aria-label="Select Background Image 1"
            >
              <img src="/assets/icons/background1.svg" alt="Background 1" />
            </div>
            <div
              class="background-image-option"
              data-src="/assets/icons/background2.svg"
              aria-label="Select Background Image 2"
            >
              <img src="/assets/icons/background2.svg" alt="Background 2" />
            </div>
            <div
              class="background-image-option"
              data-src="/assets/icons/background3.svg"
              aria-label="Select Background Image 3"
            >
              <img src="/assets/icons/background3.svg" alt="Background 3" />
            </div>
            <div
              class="background-image-option"
              data-src="/assets/icons/background4.svg"
              aria-label="Select Background Image 4"
            >
              <img src="/assets/icons/background4.svg" alt="Background 4" />
            </div>
          </div>
          <button id="clearBackgroundBtn" class="metallic-button small-btn">
            <span class="btn-gradient">Clear Background</span>
          </button>
        </div>
      </div>
    </details>
  </div>

  <div id="textStylePopover" class="design-tools-popover" aria-hidden="true">
    <details class="popover-details">
      <summary>Text Style</summary>
      <div class="control-group">
        <label for="textColor">Text Color:</label>
        <input
          type="color"
          id="textColor"
          value="#000000"
          class="metallic-input color-input"
          aria-label="Text Color Picker"
        />
      </div>
      <div class="control-group">
        <label for="fontFamily">Font Family:</label>
        <select id="fontFamily" class="metallic-input" aria-label="Font Family Selector">
          <option value="'Space Mono', monospace" style="font-family: 'Space Mono', monospace;">Space Mono</option>
          <option value="'Roboto', sans-serif" style="font-family: 'Roboto', sans-serif;">Roboto</option>
          <option value="'Merriweather', serif" style="font-family: 'Merriweather', serif;">Merriweather</option>
          <option value="'Lobster', cursive" style="font-family: 'Lobster', cursive;">Lobster</option>
          <option value="Arial, sans-serif" style="font-family: Arial, sans-serif;">Arial</option>
          <option value="'Times New Roman', Times, serif" style="font-family: 'Times New Roman', Times, serif;"
            >Times New Roman</option
          >
        </select>
      </div>
      <div class="control-group">
        <label>Font Size: <span id="fontSizeValue">24</span>px</label>
        <input
          type="range"
          id="fontSize"
          min="12"
          max="80"
          value="24"
          class="metallic-slider"
          aria-label="Font Size Slider"
        />
      </div>
      <div class="control-group">
        <label>Text Format:</label>
        <div class="text-format-controls">
          <button id="boldBtn" class="format-btn" data-format="bold" aria-label="Toggle Bold Text">B</button>
          <button id="underlineBtn" class="format-btn" data-format="underline" aria-label="Toggle Underline Text"
            >U</button
          >
          <button id="italicBtn" class="format-btn" data-format="italic" aria-label="Toggle Italic Text">I</button>
        </div>
      </div>
    </details>
  </div>

  <div id="layoutPopover" class="design-tools-popover" aria-hidden="true">
    <details class="popover-details">
      <summary>Layout</summary>
      <div class="control-group">
        <label>Text Alignment:</label>
        <div class="alignment-controls">
          <button id="alignLeft" class="alignment-btn active" data-align="left" aria-label="Align Text Left"
            >Left</button
          >
          <button id="alignCenter" class="alignment-btn" data-align="center" aria-label="Align Text Center"
            >Center</button
          >
          <button id="alignRight" class="alignment-btn" data-align="right" aria-label="Align Text Right">Right</button>
        </div>
      </div>
      <div class="control-group">
        <label>Aspect Ratio:</label>
        <div class="aspect-ratio-controls">
          <label><input type="radio" name="aspectRatio" value="free" checked /> Free</label>
          <label><input type="radio" name="aspectRatio" value="square" /> Square (1:1)</label>
          <label><input type="radio" name="aspectRatio" value="landscape" /> Landscape (16:9)</label>
          <label><input type="radio" name="aspectRatio" value="portrait" /> Portrait (9:16)</label>
        </div>
      </div>
    </details>
  </div>
</BaseLayout>
<script
  is:inline
  src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"
  integrity="sha512-BNaRQnYJYiPSqHHDb58B0yaPfCu+Wgds8Gp/gU33kqBtgNS4tSPHuGibyoeqMV/TJlSKda6FXzoEyYGjTe+vXA=="
  crossorigin="anonymous"
  referrerpolicy="no-referrer"></script>

<script is:inline>
  const MAX_WORDS = 20;

  // --- Helper Functions ---
  function countWords(str) {
    if (!str) return 0;
    return str
      .trim()
      .split(/\s+/)
      .filter((word) => word.length > 0).length;
  }

  function updateWordCountDisplay(textArea, displayElement) {
    const words = countWords(textArea.value);
    const isValid = words <= MAX_WORDS;
    displayElement.textContent = `${words} / ${MAX_WORDS} words`;
    displayElement.classList.toggle("error", !isValid);
    return isValid;
  }

  // Get all popover triggers and popovers

  const popoverTriggers = document.querySelectorAll(".popover-trigger-btn");
  const popovers = document.querySelectorAll(".design-tools-popover");

  // Function to close all open popovers
  function closeAllPopovers() {
    popovers.forEach((popover) => {
      if (popover.classList.contains("open")) {
        popover.classList.remove("open");
        popover.setAttribute("aria-hidden", "true");
        const relatedTrigger = document.querySelector(`[data-popover-target="${popover.id}"]`);
        if (relatedTrigger) {
          relatedTrigger.setAttribute("aria-expanded", "false");
          relatedTrigger.classList.remove("active-popover-trigger");
        }
        // Ensure the details element is also closed
        const detailsElement = popover.querySelector("details");
        if (detailsElement) {
          detailsElement.open = false;
        }
      }
    });
  }

  // Logic for opening and closing popovers
  popoverTriggers.forEach((trigger) => {
    trigger.addEventListener("click", () => {
      const targetPopoverId = trigger.dataset.popoverTarget;
      const targetPopover = document.getElementById(targetPopoverId);

      if (targetPopover) {
        const isOpen = targetPopover.classList.contains("open");
        const detailsElement = targetPopover.querySelector("details");

        // Close all other open popovers
        popovers.forEach((p) => {
          if (p !== targetPopover && p.classList.contains("open")) {
            p.classList.remove("open");
            p.setAttribute("aria-hidden", "true");
            const closedDetails = p.querySelector("details");
            if (closedDetails) closedDetails.open = false;
            const closedPopoverTrigger = document.querySelector(`[data-popover-target="${p.id}"]`);
            if (closedPopoverTrigger) {
              closedPopoverTrigger.setAttribute("aria-expanded", "false");
              closedPopoverTrigger.classList.remove("active-popover-trigger");
            }
          }
        });

        // Toggle the target popover
        targetPopover.classList.toggle("open", !isOpen);
        trigger.setAttribute("aria-expanded", !isOpen);
        targetPopover.setAttribute("aria-hidden", isOpen);
        trigger.classList.toggle("active-popover-trigger", !isOpen);

        if (detailsElement) detailsElement.open = !isOpen;
      }
    });
  });

  // Close popover when clicking outside
  document.addEventListener("click", (event) => {
    let clickedInsidePopover = false;
    popovers.forEach((popover) => {
      if (popover.contains(event.target)) {
        clickedInsidePopover = true;
      }
    });

    let clickedOnTrigger = false;
    popoverTriggers.forEach((trigger) => {
      if (trigger.contains(event.target)) {
        clickedOnTrigger = true;
      }
    });

    if (!clickedInsidePopover && !clickedOnTrigger) {
      closeAllPopovers();
    }
  });

  // Close popover when pressing Escape key
  document.addEventListener("keydown", (event) => {
    if (event.key === "Escape") {
      closeAllPopovers();
    }
  });

  const designContainer = document.querySelector(".design-container");
  if (designContainer) {
    let quoteData = JSON.parse(localStorage.getItem("quoteData"));

    if (!quoteData) {
      quoteData = { quote: "", author: "" };
    }

    const preview = document.getElementById("quotePreview");
    const quoteTextEl = preview?.querySelector(".quote-text");
    const authorNameEl = preview?.querySelector(".author-name");
    const aspectRatioWrapper = document.getElementById("aspectRatioWrapper");
    const editQuoteInput = document.getElementById("editQuote");
    const editAuthorInput = document.getElementById("editAuthor");
    const editWordCountEl = document.getElementById("editWordCount");
    const fontSizeValueEl = document.getElementById("fontSizeValue");
    const boldBtn = document.getElementById("boldBtn");
    const underlineBtn = document.getElementById("underlineBtn");
    const italicBtn = document.getElementById("italicBtn");
    const resetBtn = document.getElementById("resetBtn");
    const presetQuoteBtn = document.getElementById("presetQuoteBtn");

    const controls = {
      bgColor: document.getElementById("bgColor"),
      textColor: document.getElementById("textColor"),
      fontFamily: document.getElementById("fontFamily"),
      fontSize: document.getElementById("fontSize"),
      downloadBtn: document.getElementById("downloadBtn"),
      bgImageUpload: document.getElementById("bgImageUpload"),
      clearBackgroundBtn: document.getElementById("clearBackgroundBtn")
    };

    // Preset quotes
    const presetQuotes = [
      { quote: "The best way to predict the future is to create it.", author: "Peter Drucker" },
      { quote: "Believe you can and you're halfway there.", author: "Theodore Roosevelt" },
      { quote: "The only way to do great work is to love what you do.", author: "Steve Jobs" },
      {
        quote: "Spread love everywhere you go. Let no one ever come to you without leaving happier.",
        author: "Mother Teresa"
      },
      {
        quote: "The future belongs to those who believe in the beauty of their dreams.",
        author: "Eleanor Roosevelt"
      },
      { quote: "It is during our darkest moments that we must focus to see the light.", author: "Aristotle" },
      { quote: "Keep your eyes on the stars, and your feet on the ground.", author: "Theodore Roosevelt" },
      { quote: "The only impossible journey is the one you never begin.", author: "Tony Robbins" },
      { quote: "Act as if what you do makes a difference. It does.", author: "William James" },
      {
        quote: "Success is not final, failure is not fatal: it is the courage to continue that counts.",
        author: "Winston Churchill"
      }
    ];

    const alignmentButtons = document.querySelectorAll(".alignment-btn");
    const backgroundImageOptions = document.querySelectorAll(".background-image-option");
    const aspectRatioRadios = document.querySelectorAll('input[name="aspectRatio"]');
    const DOWNLOAD_COOLDOWN_MS = 5000;
    let isDownloadOnCooldown = false;

    let currentAlignment = "left";
    let currentBackgroundImage = null;
    let uploadedBgObjectURL = null;

    function initializeDesignPage() {
      if (editQuoteInput && editWordCountEl) {
        editQuoteInput.value = quoteData.quote;
        updateWordCountDisplay(editQuoteInput, editWordCountEl);
      }
      if (editAuthorInput) editAuthorInput.value = quoteData.author;
      if (controls.fontSize && fontSizeValueEl) fontSizeValueEl.textContent = controls.fontSize.value;
      updatePreview();
    }

    function updatePreview() {
      if (!preview || !quoteData || !quoteTextEl || !authorNameEl) return;
      quoteTextEl.textContent = quoteData.quote || "";
      authorNameEl.textContent = quoteData.author ? `- ${quoteData.author}` : "";
      const selectedTextColor = controls.textColor?.value || "#000000";
      quoteTextEl.style.color = selectedTextColor;
      authorNameEl.style.color = selectedTextColor;
      preview.style.fontFamily = controls.fontFamily?.value || "'Space Mono', monospace";
      preview.style.fontSize = `${controls.fontSize?.value || 24}px`;
      preview.style.textAlign = currentAlignment;
      preview.style.alignItems =
        currentAlignment === "left" ? "flex-start" : currentAlignment === "right" ? "flex-end" : "center";

      quoteTextEl.classList.toggle("bold", boldBtn?.classList.contains("active"));
      quoteTextEl.classList.toggle("underline", underlineBtn?.classList.contains("active"));
      quoteTextEl.classList.toggle("italic", italicBtn?.classList.contains("active"));

      if (currentBackgroundImage) {
        preview.style.backgroundImage = `url('${currentBackgroundImage}')`;
        preview.style.backgroundColor = "transparent";
        if (controls.bgColor) controls.bgColor.disabled = true;
      } else {
        preview.style.backgroundImage = "none";
        preview.style.backgroundColor = controls.bgColor?.value === "#000000" ? "transparent" : controls.bgColor?.value;
        if (controls.bgColor) controls.bgColor.disabled = false;
      }
      const selectedRatio = document.querySelector('input[name="aspectRatio"]:checked')?.value || "free";
      if (aspectRatioWrapper) aspectRatioWrapper.className = `aspect-ratio-${selectedRatio}`;
    }

    function resetDesign() {
      // Reset quote data
      quoteData = { quote: "", author: "" };
      if (editQuoteInput) editQuoteInput.value = "";
      if (editAuthorInput) editAuthorInput.value = "";
      if (editWordCountEl) updateWordCountDisplay(editQuoteInput, editWordCountEl);

      if (controls.bgColor) controls.bgColor.value = "#000000";
      if (controls.textColor) controls.textColor.value = "#000000";

      if (controls.fontFamily) controls.fontFamily.value = "'Space Mono', monospace";
      if (controls.fontSize) {
        controls.fontSize.value = "24";
        if (fontSizeValueEl) fontSizeValueEl.textContent = "24";
      }
      boldBtn?.classList.remove("active");
      underlineBtn?.classList.remove("active");
      italicBtn?.classList.remove("active");

      alignmentButtons.forEach((btn) => btn.classList.remove("active"));
      document.getElementById("alignLeft")?.classList.add("active");
      currentAlignment = "left";

      if (uploadedBgObjectURL) {
        URL.revokeObjectURL(uploadedBgObjectURL);
        uploadedBgObjectURL = null;
      }
      if (controls.bgImageUpload) controls.bgImageUpload.value = "";
      currentBackgroundImage = null;
      backgroundImageOptions.forEach((opt) => opt.classList.remove("active"));
      if (controls.clearBackgroundBtn) controls.clearBackgroundBtn.disabled = true;

      document.querySelector('input[name="aspectRatio"][value="free"]').checked = true;

      popovers.forEach((popover) => {
        popover.classList.remove("open");
        popover.setAttribute("aria-hidden", "true");
        // Set the details element to closed
        const detailsElement = popover.querySelector("details");
        if (detailsElement) {
          detailsElement.open = false;
        }
      });
      popoverTriggers.forEach((trigger) => {
        trigger.setAttribute("aria-expanded", "false");
        trigger.classList.remove("active-popover-trigger");
      });

      updatePreview();
    }

    // Event Listeners
    if (editQuoteInput && editWordCountEl) {
      editQuoteInput.addEventListener("input", () => {
        const isValid = updateWordCountDisplay(editQuoteInput, editWordCountEl);
        if (isValid) {
          quoteData.quote = editQuoteInput.value;
          updatePreview();
        }
      });
    }
    if (editAuthorInput) {
      editAuthorInput.addEventListener("input", () => {
        quoteData.author = editAuthorInput.value;
        updatePreview();
      });
    }

    // Generic controls (excluding color, buttons)
    ["textColor", "fontFamily", "fontSize"].forEach((controlId) => {
      const control = controls[controlId];
      if (control) {
        const eventType = control.type === "select-one" ? "change" : "input";
        control.addEventListener(eventType, () => {
          if (controlId === "fontSize" && fontSizeValueEl) {
            fontSizeValueEl.textContent = control.value;
          }
          updatePreview();
        });
      }
    });

    // Specific Listener for Background Color using 'input' event
    if (controls.bgColor) {
      controls.bgColor.addEventListener("input", () => {
        updatePreview();
      });
    }

    alignmentButtons.forEach((button) => {
      button.addEventListener("click", () => {
        alignmentButtons.forEach((btn) => btn.classList.remove("active"));
        button.classList.add("active");
        currentAlignment = button.dataset.align;
        updatePreview();
      });
    });

    [boldBtn, underlineBtn, italicBtn].forEach((button) => {
      if (button) {
        button.addEventListener("click", () => {
          button.classList.toggle("active");
          updatePreview();
        });
      }
    });

    backgroundImageOptions.forEach((option) => {
      option.addEventListener("click", () => {
        backgroundImageOptions.forEach((opt) => opt.classList.remove("active"));
        option.classList.add("active");
        currentBackgroundImage = option.dataset.src;
        if (uploadedBgObjectURL) {
          URL.revokeObjectURL(uploadedBgObjectURL);
          uploadedBgObjectURL = null;
          if (controls.bgImageUpload) controls.bgImageUpload.value = "";
        }
        if (controls.clearBackgroundBtn) controls.clearBackgroundBtn.disabled = false;
        updatePreview();
      });
    });

    if (controls.bgImageUpload) {
      controls.bgImageUpload.addEventListener("change", (event) => {
        const file = event.target.files[0];
        if (file && file.type.startsWith("image/")) {
          if (uploadedBgObjectURL) {
            URL.revokeObjectURL(uploadedBgObjectURL);
          }
          uploadedBgObjectURL = URL.createObjectURL(file);
          currentBackgroundImage = uploadedBgObjectURL;
          backgroundImageOptions.forEach((opt) => opt.classList.remove("active"));
          if (controls.bgImageUpload) controls.bgImageUpload.value = "";
          if (controls.clearBackgroundBtn) controls.clearBackgroundBtn.disabled = false;
          updatePreview();
        } else if (file) {
          alert("Please select a valid image file.");
          event.target.value = "";
        }
      });
    }

    if (controls.clearBackgroundBtn) {
      controls.clearBackgroundBtn.addEventListener("click", () => {
        backgroundImageOptions.forEach((opt) => opt.classList.remove("active"));
        if (uploadedBgObjectURL) {
          URL.revokeObjectURL(uploadedBgObjectURL);
          uploadedBgObjectURL = null;
        }
        if (controls.bgImageUpload) controls.bgImageUpload.value = "";
        currentBackgroundImage = null;
        controls.clearBackgroundBtn.disabled = true;
        updatePreview();
      });
      controls.clearBackgroundBtn.disabled = !currentBackgroundImage;
    }

    aspectRatioRadios.forEach((radio) => {
      radio.addEventListener("change", () => {
        updatePreview();
      });
    });

    if (controls.downloadBtn && preview) {
      controls.downloadBtn.addEventListener("click", () => {
        if (isDownloadOnCooldown) {
          return;
        }

        isDownloadOnCooldown = true;
        controls.downloadBtn.disabled = true;

        const spinner = controls.downloadBtn.querySelector(".loading-spinner");
        if (spinner) spinner.style.display = "inline-block";

        if (typeof html2canvas === "undefined") {
          alert("Error: html2canvas library is not loaded.");
          isDownloadOnCooldown = false;
          controls.downloadBtn.disabled = false;
          if (spinner) spinner.style.display = "none";
          return;
        }

        const canvasOptions = {
          backgroundColor: currentBackgroundImage
            ? null
            : controls.bgColor?.value === "#000000"
              ? null
              : controls.bgColor?.value,
          scale: 2,
          useCORS: true,
          allowTaint: true,
          logging: false,
          imageTimeout: 5000
        };
        const elementToCapture = aspectRatioWrapper.className === "aspect-ratio-free" ? preview : aspectRatioWrapper;
        html2canvas(elementToCapture, canvasOptions)
          .then((canvas) => {
            try {
              const link = document.createElement("a");
              link.download = `quote-design-${Date.now()}.png`;
              link.href = canvas.toDataURL("image/png");
              document.body.appendChild(link);
              link.click();
              document.body.removeChild(link);
            } catch (downloadError) {
              alert("Error creating download link.");
            }
          })
          .finally(() => {
            if (spinner) spinner.style.display = "none";

            setTimeout(() => {
              isDownloadOnCooldown = false;
              controls.downloadBtn.disabled = false;
            }, DOWNLOAD_COOLDOWN_MS);
          });
      });
    }

    if (resetBtn) {
      resetBtn.addEventListener("click", resetDesign);
    }

    // Event listener for the Preset Quote button
    if (presetQuoteBtn) {
      presetQuoteBtn.addEventListener("click", () => {
        const randomIndex = Math.floor(Math.random() * presetQuotes.length);
        const selectedQuote = presetQuotes[randomIndex];

        if (editQuoteInput && editWordCountEl) {
          editQuoteInput.value = selectedQuote.quote;
          updateWordCountDisplay(editQuoteInput, editWordCountEl);
          quoteData.quote = selectedQuote.quote;
        }
        if (editAuthorInput) {
          editAuthorInput.value = selectedQuote.author;
          quoteData.author = selectedQuote.author;
        }
        updatePreview();
      });
    }

    initializeDesignPage();
  }
</script>
