---
import "@/assets/styles/alphabets/[alphabet]/playground.css";
import Help from "@/components/Help.astro";
import BaseLayout from "@/layouts/Base";
import rawAlphabetData from "@/data/alphabets.json";
import { type AlphabetsData } from "@/types/alphabet";

const alphabetData = rawAlphabetData as AlphabetsData;

export async function getStaticPaths() {
  const alphabetData = rawAlphabetData as AlphabetsData;
  const categories = Object.keys(alphabetData);
  return categories.map((category) => ({
    params: { alphabet: category }
  }));
}

const { alphabet } = Astro.params;
const currentCategory = alphabetData[alphabet as keyof AlphabetsData];
---

<BaseLayout meta={{ title: `Playground - ${alphabet?.charAt(0).toUpperCase() + alphabet?.slice(1)}` }}>
  <Fragment slot="header-right">
    <Help
      title={`${alphabet?.charAt(0).toUpperCase() + alphabet?.slice(1)} Playground`}
      description="Press any letter key (A-Z) to see the corresponding information from the selected alphabet category."
    />
  </Fragment>
  <article class="tv container__typing">
    <div class="letter">A</div>
    <div class="emoji">{currentCategory.icon}</div>
    <div class="spelling animation" id="spelling"></div>
    <div class="description" id="description"></div>
  </article>

  <script define:vars={{ alphabetData: currentCategory.data, category: alphabet }}>
    const letterDiv = document.querySelector(".letter");
    const emojiDiv = document.querySelector(".emoji");
    const spellDiv = document.querySelector(".spelling");
    const descriptionDiv = document.querySelector(".description");

    const addClass = function (className) {
      this.classList.add(className);
    };

    const removeClass = function (className) {
      this.classList.remove(className);
    };

    const drawLetter = (letter, color = "pink") => {
      letterDiv.innerHTML = letter;
      letterDiv.style.color = color;
    };

    const drawInfo = (letter, color) => {
      const info = alphabetData.find((item) => item.letter === letter);
      if (info) {
        // Display text
        spellDiv.innerHTML = info.text;
        spellDiv.style.color = color;
        document.documentElement.style.setProperty("--steps", info.text.length);

        // Display description
        descriptionDiv.innerHTML = info.description;
        descriptionDiv.style.color = color;

        // Animation handling
        spellDiv.classList.remove("animation");
        void spellDiv.offsetWidth;
        spellDiv.classList.add("animation");
      }
    };

    const colorBox = ["#FF6B6B", "#4ECDC4", "#45B7D1", "#96CEB4", "#FFEEAD", "#D4A5A5", "#9B59B6", "#3498DB"];
    const random = (arr) => arr[Math.floor(Math.random() * arr.length)];
    const isAlphabet = (keyCode) => keyCode >= 65 && keyCode <= 90;

    document.addEventListener(
      "keydown",
      (e) => {
        e.preventDefault();
        const color = random(colorBox);
        const { key, keyCode } = e;
        if (isAlphabet(keyCode)) {
          const keyCapital = key.toUpperCase();
          drawLetter(keyCapital, color);
          drawInfo(keyCapital, color); // Pass color as parameter
        }
      },
      false
    );
  </script>
</BaseLayout>
