---
import "@/assets/styles/clan.css";
import ClanCard from "@/components/ClanCard.astro";
import BaseLayout from "@/layouts/Base";
import clanJson from "@/data/family.json";
import Back from "@/components/Back.astro";

interface Surname {
  hi: string;
  en: string;
}

interface Branch {
  id: number;
  gotra: {
    hi: string;
    en: string;
  };
  deity: {
    hi: string;
    en: string;
  };
  caste: {
    hi: string;
    en: string;
  };
  location: {
    hi: string;
    en: string;
  };
  surnames: Surname[];
}

function isBranch(data: any): data is Branch {
  return (
    data &&
    typeof data.id === "number" &&
    data.gotra &&
    typeof data.gotra.hi === "string" &&
    typeof data.gotra.en === "string" &&
    data.deity &&
    typeof data.deity.hi === "string" &&
    typeof data.deity.en === "string" &&
    data.caste &&
    typeof data.caste.hi === "string" &&
    typeof data.caste.en === "string" &&
    data.location &&
    typeof data.location.hi === "string" &&
    typeof data.location.en === "string" &&
    Array.isArray(data.surnames) &&
    data.surnames.every((surname: any) => surname && typeof surname.hi === "string" && typeof surname.en === "string")
  );
}
const validClanData = Array.isArray(clanJson) ? clanJson.filter(isBranch) : [];
const meta = {
  title: "Clan Explorer",
  description:
    "Search and explore your family's heritage by gotra, deity, caste, and location using this organized clan directory."
};
---

<BaseLayout meta={meta}>
  <Back />
  <article class="container__clan">
    <div class="clan__header">
      <h1 class="clan__title">Discover Your Heritage and Family Connections</h1>
      <div class="clan__search">
        <div class="clan__search-wrapper">
          <span class="clan__search-icon">üîç</span>
          <input
            type="text"
            id="searchInput"
            class="clan__search-input"
            placeholder="Search by Gotra, Deity, or Caste..."
          />
        </div>
        <button id="downloadPdf" class="download-button" aria-label="Download as PDF">
          <span class="text">Download PDF</span>
        </button>
      </div>
      <div class="clan__legend">
        <dl title="Gotra">
          <dt class="legend" data-icon="üß¨"></dt>
          <dd>Clan</dd>
        </dl>
        <dl title="Kul devi">
          <dt class="legend" data-icon="ü™î"></dt>
          <dd>Deity</dd>
        </dl>
        <dl title="Jaati">
          <dt class="legend" data-icon="üå≥"></dt>
          <dd>Caste</dd>
        </dl>
      </div>
    </div>

    <div class="clan__content">
      <section class="clan__section">
        <ClanCard initialData={validClanData} />
      </section>
    </div>
  </article>
</BaseLayout>

<script>
  function highlightText(text: string, query: string): string {
    if (!text || !query) return text;
    const regex = new RegExp(`(${query.trim()})`, "gi");
    return text.replace(regex, `<span class="highlight">$1</span>`);
  }

  document.addEventListener("DOMContentLoaded", () => {
    const searchInput = document.getElementById("searchInput") as HTMLInputElement | null;
    const downloadBtn = document.getElementById("downloadPdf") as HTMLButtonElement | null;
    const cards = document.querySelectorAll<HTMLElement>(".card");

    // Search functionality
    searchInput?.addEventListener("input", (e: Event) => {
      const target = e.target as HTMLInputElement | null;
      const query = target?.value?.toLowerCase().trim() ?? "";

      cards.forEach((card) => {
        const gotra = (card.dataset.gotra ?? "").toLowerCase();
        const deity = (card.dataset.deity ?? "").toLowerCase();
        const caste = (card.dataset.caste ?? "").toLowerCase();

        const hasMatch = gotra.includes(query) || deity.includes(query) || caste.includes(query);

        card.style.display = hasMatch ? "block" : "none";

        if (hasMatch) {
          // Highlight matching text
          const values = card.querySelectorAll<HTMLElement>(".value");
          values.forEach((el) => {
            const text = el.textContent ?? "";
            el.innerHTML = highlightText(text, query);
          });
        }
      });
    });

    // PDF download
    downloadBtn?.addEventListener("click", () => {
      // Expand all cards for printing
      cards.forEach((card) => {
        card.classList.add("expanded");
        const btn = card.querySelector<HTMLElement>(".surname-count");
        const body = card.querySelector<HTMLElement>(".card-body");
        btn?.setAttribute("aria-expanded", "true");
        body?.setAttribute("aria-hidden", "false");
      });

      setTimeout(() => {
        window.print();
      }, 500);
    });
  });
</script>
