---
import { Debug } from 'astro:components';
import BackIcon from "@/components/Back.astro";
import Help from "@/components/Help.astro";
import SharePopover from "@/components/ShareButton.astro";
import BaseLayout from "@/layouts/Base";
import poem from "@/data/poem.json";
import PoemCard from "@/components/PoemCard.astro";
import SquareBubble from "@/components/SquareBubble.astro";
import CloseCard from "@/assets/icons/closecard.svg";
import "@/assets/styles/poems.css";
import "@/utils/common";
const { poems } = poem;
sortBy(poems,"title");

---

<BaseLayout meta={{ title: "Poems" }}>
  <BackIcon />
  <Fragment slot="header-right">
    <SharePopover />
    <Help
      title="Poems"
      description="Poems page features a bright, playful design filled with short, themed poems. Children can read & listen to poems. Easy navigation and colorful visuals engaging young readers, parents and teachers alike."
    />
  </Fragment>
  <div class="Container__poems">
    <div class="home_outer">
      <div class="home_start">
        <div class="context">
          <div>Welcome to Poem World!</div>
          <div>Hello, little reader!</div>
        </div>
        <div class="area">
          <ul class="circles">
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
          </ul>
        </div>
      </div>
    </div>
    <div class="outer__poem">
      <div class="container__PoemCard">

        {poems.map((poem) => <PoemCard title={poem.title} lines={poem.lines} cute_emoji={poem.cute_emoji} />)}
      </div>
    </div>

    <dialog id="poem-modal" class="poem-dialog">
      <div class="modal-content">
        <div class="model-buttons">
          <button id="audio-toggle" class="speaker-btn" title="Play Poem">
          </button>
          <button id="close-modal" class="close" aria-label="Close">
            <CloseCard/>
          </button>
        </div>
        <h2 id="modal-title"></h2>
        <p id="modal-lines"></p>
      </div>
    </dialog>
  </div>
  <script type="module" is:inline>
    const modal = document.getElementById("poem-modal");
    const closeBtn = document.getElementById("close-modal");
    const titleEl = document.getElementById("modal-title");
    const linesEl = document.getElementById("modal-lines");
    const audioToggle = document.getElementById("audio-toggle");

    let isMuted = true;
    let currentText = "";
    let availableVoices = [];
    let voicesLoadedPromise = null;

const svgMuted = `
<svg id="audio-icon" class="audio-icon" xmlns="http://www.w3.org/2000/svg" 
      viewBox="0 0 24 24" width="24" height="24" fill="none">
  <path d="M13 3L7 8H5C3.895 8 3 8.895 3 10V14C3 15.105 3.895 16 5 16H7L13 21V3Z" 
      stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="M16 9L22 15M22 9L16 15" 
      stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
</svg>`;

const svgUnmuted = `
<svg id="audio-icon" class="audio-icon" xmlns="http://www.w3.org/2000/svg" 
      viewBox="0 0 24 24" width="24" height="24" fill="none">
  <path d="M13 3L7 8H5C3.895 8 3 8.895 3 10V14C3 15.105 3.895 16 5 16H7L13 21V3Z" 
      stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="M16 9C16.5 9.5 17 10.5 17 12C17 13.5 16.5 14.5 16 15" 
        stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="M19 6C20.5 7.5 21 10 21 12C21 14 20.5 16.5 19 18" 
        stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
</svg>`;


    function resetSpeakerButton() {
      isMuted = true;
      audioToggle.innerHTML = svgMuted;
      window.speechSynthesis.cancel();
    }

    function ensureVoicesLoaded() {
      if (availableVoices.length > 0) return Promise.resolve();
      if (voicesLoadedPromise) return voicesLoadedPromise;

      voicesLoadedPromise = new Promise((resolve) => {
        const voicesNow = speechSynthesis.getVoices();
        if (voicesNow.length > 0) {
          availableVoices = voicesNow;
          resolve();
        } else {
          speechSynthesis.onvoiceschanged = () => {
            availableVoices = speechSynthesis.getVoices();
            resolve();
          };
        }
      });
      return voicesLoadedPromise;
    }

    async function speakPoem() {
      if (!currentText || isMuted) return;
      window.speechSynthesis.cancel();
      await ensureVoicesLoaded();

      if (availableVoices.length === 0) {
        audioToggle.textContent = "ðŸš«";
        return;
      }

      const utterance = new SpeechSynthesisUtterance(currentText);
      let selectedVoice =
        availableVoices.find(
          (v) => v.lang === "en-US" && (v.name.includes("Google") || v.name.includes("Microsoft Zira"))
        ) ||
        availableVoices.find((v) => v.lang === "en-US") ||
        availableVoices[0];

      if (!selectedVoice) {
        audioToggle.textContent = "ðŸš«";
        return;
      }

      utterance.voice = selectedVoice;
      utterance.lang = "en-US";
      utterance.onerror = (event) => console.error("Speech error:", event.error);
      speechSynthesis.speak(utterance);
    }

    window.showPoem = async (title, lines) => {
      titleEl.innerText = title;
      linesEl.innerText = lines.join("\n");

      resetSpeakerButton();
      currentText = lines.join(" ");
      currentLang = "en-US";
      await ensureVoicesLoaded();
      modal.showModal();
    };

    audioToggle.onclick = () => {
      isMuted = !isMuted;
      audioToggle.innerHTML = isMuted ? svgMuted : svgUnmuted;
      if (!isMuted) {
        speakPoem();
      } else {
        speechSynthesis.cancel();
      }
    };

    closeBtn.onclick = () => {
      modal.close();
      resetSpeakerButton();
    };

    window.addEventListener("click", (e) => {
      if (e.target === modal) {
        modal.close();
        resetSpeakerButton();
      }
    });

    ensureVoicesLoaded();
  </script>
</BaseLayout>
