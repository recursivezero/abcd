---
import { alphabetMapper } from "@/mappers/alphabet";
import { IMAGE_DIR } from "@/utils/constants";
import BaseLayout from "@/layouts/Base";
import BackButton from "@/components/BackButton.astro";
import Help from "@/components/Help.astro";
import "@/assets/styles/cards/queue.css";
import SharePopover from "@/components/ShareButton.astro";
import KeyboardTrigger from "@/components/KeyboardTrigger.astro";

const meta = {
  title: "Queue Alphabet",
  description: "Explore the interactive alphabet with images and descriptions for each letter in a queue format."
};

interface AlphabetItem {
  key: string;
  value: string;
  desc: string;
}

const items: Record<string, AlphabetItem> = alphabetMapper.reduce(
  (acc, { key, value }) => {
    acc[key.toUpperCase()] = {
      key: key.toUpperCase(),
      value,
      desc: `${value} representing the letter ${key.toUpperCase()}`
    };
    return acc;
  },
  {} as Record<string, AlphabetItem>
);

const entries = Object.entries(items);
const count = entries.length;

function randomAngle(max: number, min: number): number {
  return +(min + (max - min) * Math.random()).toFixed(2);
}

let currentIndex = 0;
---

<BaseLayout meta={meta}>
  <Fragment slot="header-right">
    <KeyboardTrigger />
    <SharePopover />
    <Help title="Queue" description="Swipe or press arrow keys to view the next alphabet-based quote design." />
  </Fragment>
  <BackButton />
  <div class="alphabet-main-wrapper">
    <section
      class="alphabet-container"
      style={`--n: ${count}; --k: ${currentIndex}`}
      data-total={count}
      data-current-index={currentIndex}
      role="region"
      aria-label="Interactive Alphabet Explorer"
    >
      <header class="alphabet-header">
        <h2 class="alphabet-title">Alphabet Queue</h2>
      </header>

      <main class="content-area">
        <div class="image-container">
          {
            entries.map(([key, item], i) => {
              const angle = randomAngle(15, -15);
              return (
                <article
                  class="alphabet-item"
                  style={`--i: ${i}; --a: ${angle}deg;`}
                  data-letter={key}
                  data-index={i}
                  role="img"
                  aria-label={`Letter ${key} - ${item.value}`}
                  tabindex={i === currentIndex ? "0" : "-1"}
                >
                  <img class="item-image" src={`${IMAGE_DIR}/${item.value}.jpg`} alt={item.desc} loading="lazy" />
                  <div class="text-content">
                    <h2 class="letter" aria-hidden="true">
                      {key}
                    </h2>
                    <p class="item-desc">{item.value}</p>
                  </div>
                </article>
              );
            })
          }
        </div>
      </main>

      <nav class="nav-buttons" aria-label="Alphabet navigation">
        <button class="nav-button prev-button" aria-label="Previous letter" data-direction="prev" type="button">
          <span class="sr-only">Previous</span>
        </button>
        <button class="nav-button next-button" aria-label="Next letter" data-direction="next" type="button">
          <span class="sr-only">Next</span>
        </button>
      </nav>
    </section>

    <div class="keyboard-hint" role="status" aria-live="polite">Use arrow keys or press any letter key to navigate</div>
  </div>
</BaseLayout>
<script is:inline>
  (function () {
    const container = document.querySelector(".alphabet-container");
    const items = Array.from(document.querySelectorAll(".alphabet-item"));
    const navButtons = Array.from(document.querySelectorAll("[data-direction]"));
    const count = parseInt(container.dataset.total);
    let currentIndex = parseInt(container.dataset.currentIndex) || 0;
    let isTransitioning = false;

    const alphabetMap = {};
    items.forEach((item, index) => {
      const letter = item.dataset.letter;
      alphabetMap[letter] = index;
    });

    function updateItemPositions() {
      items.forEach((item, index) => {
        item.classList.remove("active", "next", "prev", "far");

        const diff = index - currentIndex;

        if (diff === 0) {
          item.classList.add("active");
          item.setAttribute("tabindex", "0");
          item.setAttribute("aria-current", "true");
        } else {
          // All other items
          item.setAttribute("tabindex", "-1");
          item.removeAttribute("aria-current");
          if (diff === 1 || diff === -(count - 1)) {
            item.classList.add("next");
          } else if (diff === -1 || diff === count - 1) {
            item.classList.add("prev");
          } else {
            item.classList.add("far");
          }
        }
      });
    }

    function navigateToIndex(newIndex, animate = true) {
      if (isTransitioning || newIndex === currentIndex) return;

      const targetIndex = ((newIndex % count) + count) % count;

      if (animate) {
        isTransitioning = true;
        container.classList.add("transitioning");

        const newActiveItem = items[targetIndex];
        const previousActiveItem = items[currentIndex];

        if (previousActiveItem) {
          previousActiveItem.blur();
        }

        let transitionEndCounter = 0;
        const expectedTransitions = 3; // Active, next, prev items typically transition

        const handleTransitionEnd = (event) => {
          if (event.propertyName === "transform" || event.propertyName === "opacity") {
            transitionEndCounter++;
            if (transitionEndCounter >= expectedTransitions) {
              isTransitioning = false;
              container.classList.remove("transitioning");

              if (newActiveItem && document.activeElement !== newActiveItem) {
                newActiveItem.focus({ preventScroll: true });
              }

              items.forEach((item) => {
                item.removeEventListener("transitionend", handleTransitionEnd);
              });
            }
          }
        };

        items.forEach((item) => {
          if (item.classList.contains("active") || item.classList.contains("next") || item.classList.contains("prev")) {
            item.addEventListener("transitionend", handleTransitionEnd);
          }
        });

        setTimeout(() => {
          if (isTransitioning) {
            isTransitioning = false;
            container.classList.remove("transitioning");
            if (newActiveItem && document.activeElement !== newActiveItem) {
              newActiveItem.focus({ preventScroll: true });
            }
            items.forEach((item) => {
              item.removeEventListener("transitionend", handleTransitionEnd);
            });
          }
        }, 600); // Matches CSS transition duration
      } else {
        const activeItem = items[targetIndex];
        if (activeItem && document.activeElement !== activeItem) {
          activeItem.focus({ preventScroll: true });
        }
      }

      currentIndex = targetIndex;
      container.dataset.currentIndex = currentIndex;
      updateItemPositions();
    }

    function navigateToLetter(letter) {
      const targetIndex = alphabetMap[letter.toUpperCase()];
      if (targetIndex !== undefined) {
        navigateToIndex(targetIndex);
      }
    }

    function handleNavigation(direction) {
      if (isTransitioning) return;

      const increment = direction === "next" ? 1 : -1;
      const newIndex = currentIndex + increment;
      navigateToIndex(newIndex);
    }

    navButtons.forEach((button) => {
      button.addEventListener("click", (e) => {
        e.preventDefault();
        const direction = button.dataset.direction;
        handleNavigation(direction);
      });
    });

    document.addEventListener("keydown", (e) => {
      if (e.target.tagName === "INPUT" || e.target.tagName === "TEXTAREA") {
        return;
      }

      switch (e.key) {
        case "ArrowLeft":
          e.preventDefault();
          handleNavigation("prev");
          break;
        case "ArrowRight":
          e.preventDefault();
          handleNavigation("next");
          break;
        case "Home":
          e.preventDefault();
          navigateToIndex(0);
          break;
        case "End":
          e.preventDefault();
          navigateToIndex(count - 1);
          break;
        default:
          if (e.key.match(/^[a-zA-Z]$/)) {
            e.preventDefault();
            navigateToLetter(e.key);
          }
          break;
      }
    });
    // Touch navigation for mobile devices
    let touchStartX = 0;
    let touchEndX = 0;
    const minSwipeDistance = 50;

    container.addEventListener(
      "touchstart",
      (e) => {
        touchStartX = e.changedTouches[0].screenX;
      },
      { passive: true }
    );

    container.addEventListener(
      "touchend",
      (e) => {
        touchEndX = e.changedTouches[0].screenX;
        const deltaX = touchEndX - touchStartX;

        if (Math.abs(deltaX) > minSwipeDistance) {
          if (deltaX > 0) {
            handleNavigation("prev");
          } else {
            handleNavigation("next");
          }
        }
      },
      { passive: true }
    );

    let hintTimeout;
    const keyboardHint = document.querySelector(".keyboard-hint");

    function hideHintAfterDelay() {
      clearTimeout(hintTimeout);
      hintTimeout = setTimeout(() => {
        if (keyboardHint) {
          keyboardHint.style.opacity = "0";
        }
      }, 10);
    }

    ["keydown", "click", "touchstart"].forEach((event) => {
      document.addEventListener(event, hideHintAfterDelay, { once: true });
    });

    function preloadImages() {
      items.forEach((item) => {
        const img = item.querySelector(".item-image");
        if (img && img.src) {
          const preloadImg = new Image();
          preloadImg.src = img.src;
        }
      });
    }

    items.forEach((item) => {
      const img = item.querySelector(".item-image");
      if (img) {
        img.addEventListener("error", () => {
          img.style.backgroundColor = "rgba(129, 140, 248, 0.1)";
          img.style.display = "flex";
          img.style.alignItems = "center";
          img.style.justifyContent = "center";
          img.innerHTML = '<span style="color: rgba(241, 245, 249, 0.5); font-size: 2rem;">📷</span>';
        });
      }
    });

    // Initialize component
    function initializeAlphabet() {
      updateItemPositions();
      preloadImages();
    }

    let resizeTimeout;
    window.addEventListener("resize", () => {
      clearTimeout(resizeTimeout);
      resizeTimeout = setTimeout(() => {
        updateItemPositions();
      }, 250);
    });

    if (document.readyState === "loading") {
      document.addEventListener("DOMContentLoaded", initializeAlphabet);
    } else {
      initializeAlphabet();
    }

    window.alphabetCleanup = function () {
      clearTimeout(hintTimeout);
      clearTimeout(resizeTimeout);
    };
  })();
</script>
