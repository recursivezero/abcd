---
import { alphabetMapper } from "@/mappers/alphabet";
import { IMAGE_DIR } from "@/utils/constants";
import BaseLayout from "@/layouts/Base";
import BackButton from "@/components/BackButton.astro";
import Help from "@/components/Help.astro";
import "@/assets/styles/cards/stack.css";
import SharePopover from "@/components/ShareButton.astro";

const meta = {
  title: "Stack Alphabet",
  description:
    "Explore the interactive alphabet with images and descriptions for each letter in a stack display format."
};

interface AlphabetItem {
  key: string;
  value: string;
  desc: string;
}

const items: Record<string, AlphabetItem> = alphabetMapper.reduce(
  (acc, { key, value }) => {
    acc[key.toUpperCase()] = {
      key: key.toUpperCase(),
      value,
      desc: `${value} representing the letter ${key.toUpperCase()}`
    };
    return acc;
  },
  {} as Record<string, AlphabetItem>
);

const entries = Object.entries(items);
const count = entries.length;

function randomAngle(max: number, min: number): number {
  return +(min + (max - min) * Math.random()).toFixed(2);
}

let currentIndex = 0;
---

<BaseLayout meta={meta}>
  <Fragment slot="header-right">
    <div class="header-tools-wrapper"></div>
    <SharePopover />
    <Help title="Stack" description="Swipe or press arrow keys to view the next alphabet-based stack design." />
  </Fragment>
  <BackButton />
  <main class="alphabet-page">
    <div class="alphabet-wrapper">
      <section
        class="alphabet-container"
        style={`--n: ${count}; --k: ${currentIndex}`}
        data-total={count}
        data-current-index={currentIndex}
        role="region"
        aria-label="Interactive Alphabet Explorer"
      >
        <header class="alphabet-header">
          <h2 class="alphabet-title">Alphabet Stack</h2>
        </header>

        <div class="content-area">
          <div class="image-container">
            {
              entries.map(([key, item], i) => {
                const angle = randomAngle(15, -15);
                return (
                  <article
                    class="alphabet-item"
                    style={`--i: ${i}; --a: ${angle}deg;`}
                    data-letter={key}
                    data-index={i}
                    role="img"
                    aria-label={`Letter ${key} - ${item.value}`}
                    tabindex={i === currentIndex ? "0" : "-1"}
                    style="outline: none;"
                  >
                    <img class="item-image" src={`${IMAGE_DIR}/${item.value}.jpg`} alt={item.desc} loading="lazy" />
                    <div class="text-content">
                      <h2 class="letter" aria-hidden="true">
                        {key}
                      </h2>
                      <p class="item-desc">{item.value}</p>
                    </div>
                  </article>
                );
              })
            }
          </div>
        </div>

        <nav class="nav-buttons" aria-label="Alphabet navigation">
          <button class="nav-button prev-button" aria-label="Previous letter" data-direction="prev" type="button">
            <span class="sr-only">Previous</span>
          </button>
          <button class="nav-button next-button" aria-label="Next letter" data-direction="next" type="button">
            <span class="sr-only">Next</span>
          </button>
        </nav>
      </section>

      <div class="keyboard-hint" role="status" aria-live="polite">Use arrow keys or swipe your screen to navigate</div>
    </div>
  </main>
</BaseLayout>
<script>
  (function () {
    const container = document.querySelector(".alphabet-container")! as HTMLElement;
    const items = Array.from(document.querySelectorAll(".alphabet-item")) as HTMLElement[];
    const navButtons = Array.from(document.querySelectorAll("[data-direction]")) as HTMLElement[];

    const count: number = parseInt(container.dataset.total || "0", 10);
    let currentIndex: number = parseInt(container.dataset.currentIndex || "0", 10);
    let isTransitioning = false;

    function updateItemPositions(): void {
      items.forEach((item, index) => {
        item.classList.remove("active");
        item.setAttribute("tabindex", index === currentIndex ? "0" : "-1");
        item.setAttribute("aria-current", index === currentIndex ? "true" : "false");
        if (index === currentIndex) {
          item.classList.add("active");
        }
      });

      container.style.setProperty("--k", currentIndex.toString());
    }

    function navigateToIndex(newIndex: number, animate: boolean = true): void {
      if (isTransitioning || newIndex === currentIndex) return;

      const targetIndex = ((newIndex % count) + count) % count;

      if (animate) {
        isTransitioning = true;

        const newActiveItem = items[targetIndex];
        const previousActiveItem = items[currentIndex];

        if (previousActiveItem) previousActiveItem.blur(); // Remove focus from previous item

        currentIndex = targetIndex;
        container.dataset.currentIndex = currentIndex.toString();
        updateItemPositions();

        setTimeout(() => {
          isTransitioning = false;
          if (newActiveItem) {
            newActiveItem.focus({ preventScroll: true });
            // Ensure no unwanted outline by forcing a style reset
            newActiveItem.style.outline = "none";
          }
        }, 800);
      } else {
        currentIndex = targetIndex;
        container.dataset.currentIndex = currentIndex.toString();
        updateItemPositions();

        const activeItem = items[targetIndex];
        if (activeItem) {
          activeItem.focus({ preventScroll: true });
          activeItem.style.outline = "none"; // Remove outline on instant navigation
        }
      }
    }

    function handleNavigation(direction: string): void {
      if (isTransitioning) return;
      const increment = direction === "next" ? 1 : -1;
      const newIndex = currentIndex + increment;
      navigateToIndex(newIndex);
    }

    navButtons.forEach((button) => {
      button.addEventListener("click", (e: Event) => {
        e.preventDefault();
        const direction = (button as HTMLElement).dataset.direction;
        if (direction) handleNavigation(direction);
      });
    });

    document.addEventListener("keydown", (e: KeyboardEvent) => {
      const tag = (e.target as HTMLElement)?.tagName;
      if (tag === "INPUT" || tag === "TEXTAREA") return;

      switch (e.key) {
        case "ArrowLeft":
          e.preventDefault();
          handleNavigation("prev");
          break;
        case "ArrowRight":
          e.preventDefault();
          handleNavigation("next");
          break;
        case "Home":
          e.preventDefault();
          navigateToIndex(0);
          break;
        case "End":
          e.preventDefault();
          navigateToIndex(count - 1);
          break;
      }
    });

    // Touch support
    let touchStartX = 0;
    let touchEndX = 0;
    const minSwipeDistance = 50;

    container.addEventListener(
      "touchstart",
      (e: TouchEvent) => {
        touchStartX = e.changedTouches[0].screenX;
      },
      { passive: true }
    );

    container.addEventListener(
      "touchend",
      (e: TouchEvent) => {
        touchEndX = e.changedTouches[0].screenX;
        const deltaX = touchEndX - touchStartX;

        if (Math.abs(deltaX) > minSwipeDistance) {
          handleNavigation(deltaX > 0 ? "prev" : "next");
        }
      },
      { passive: true }
    );

    let hintTimeout: ReturnType<typeof setTimeout>;
    const keyboardHint = document.querySelector(".keyboard-hint") as HTMLElement | null;

    function hideHintAfterDelay(): void {
      clearTimeout(hintTimeout);
      hintTimeout = setTimeout(() => {
        if (keyboardHint) {
          keyboardHint.style.opacity = "0";
        }
      });
    }

    ["keydown", "click", "touchstart"].forEach((event) => {
      document.addEventListener(event, hideHintAfterDelay, { once: true });
    });

    function preloadImages(): void {
      items.forEach((item) => {
        const img = item.querySelector(".item-image") as HTMLImageElement | null;
        if (img && img.src) {
          const preloadImg = new Image();
          preloadImg.src = img.src;
        }
      });
    }

    items.forEach((item) => {
      const img = item.querySelector(".item-image") as HTMLImageElement | null;
      if (img) {
        img.addEventListener("error", () => {
          const parent = img.parentElement as HTMLElement;
          parent.style.backgroundColor = "rgba(129, 140, 248, 0.1)";
          parent.style.display = "flex";
          parent.style.alignItems = "center";
          parent.style.justifyContent = "center";
          parent.innerHTML = '<span style="color: rgba(241, 245, 249, 0.5); font-size: 2rem;">ðŸ“·</span>';
        });
      }
    });

    function initializeAlphabet(): void {
      updateItemPositions();
      preloadImages();
    }

    let resizeTimeout: ReturnType<typeof setTimeout>;
    window.addEventListener("resize", () => {
      clearTimeout(resizeTimeout);
      resizeTimeout = setTimeout(() => {
        updateItemPositions();
      }, 250);
    });

    if (document.readyState === "loading") {
      document.addEventListener("DOMContentLoaded", initializeAlphabet);
    } else {
      initializeAlphabet();
    }

    (window as any).alphabetCleanup = function (): void {
      clearTimeout(hintTimeout);
      clearTimeout(resizeTimeout);
    };
  })();
</script>
