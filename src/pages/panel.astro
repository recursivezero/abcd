---
import "@/assets/styles/panel.css";
import Help from "@/components/Help.astro";
import BaseLayout from "@/layouts/Base";
import "@/assets/styles/common.css";
import SettingIcon from "@/assets/icons/settings.svg";
import Back from "@/components/Back.astro";
import SharePopover from "@/components/ShareButton.astro";
import KeyboardTrigger from "@/components/KeyboardTrigger.astro";
---

<BaseLayout meta={{ title: "Panel" }}>
  <Back />
  <Fragment slot="header-right">
    <div class="right-header-buttons">
      <div class="settings-button-container">
        <button id="settingsButton" class="settings-button" aria-label="Open panel settings">
          <SettingIcon class="settings-icon" />
        </button>
        <div id="panelToolsPopover" class="panel-tools-popover" aria-hidden="true">
          <h2 class="gradient-text">Panel Tools</h2>
          <section id="option-box" class="panel__options">
            <div class="controls" role="radiogroup" aria-labelledby="orientation-label">
              <span id="orientation-label" class="sr-only">Panel Orientation</span>

              <label class="vertical" for="vertical">
                <input
                  type="radio"
                  class="orientation"
                  name="orientation"
                  id="vertical"
                  value="X"
                  aria-label="Vertical Orientation"
                />
                <span class="icon" aria-hidden="true">⇕</span>
                <span class="sr-only">Vertical Orientation</span>
              </label>

              <label class="horizontal" for="horizontal">
                <input
                  type="radio"
                  class="orientation"
                  name="orientation"
                  id="horizontal"
                  value="Y"
                  aria-label="Horizontal Orientation"
                />
                <span class="icon" aria-hidden="true">⇔</span>
                <span class="sr-only">Horizontal Orientation</span>
              </label>
            </div>

            <div class="controls" role="radiogroup" aria-labelledby="content-type-label">
              <span id="content-type-label" class="sr-only">Panel Content Type</span>

              <label class="alphabet" for="alphabet">
                <input
                  type="radio"
                  class="content-type"
                  name="content-type"
                  id="alphabet"
                  value="alphabet"
                  aria-label="Alphabet Panel"
                  checked
                />
                <span class="icon" aria-hidden="true">A-Z</span>
                <span class="sr-only">Alphabet Panel</span>
              </label>

              <label class="numbers" for="numbers">
                <input
                  type="radio"
                  class="content-type"
                  name="content-type"
                  id="numbers"
                  value="numbers"
                  aria-label="Numbers Panel"
                />
                <span class="icon" aria-hidden="true">0-9</span>
                <span class="sr-only">Numbers Panel</span>
              </label>
            </div>

            <div class="range__option">
              <span id="min-range-value">10</span>
              <input
                type="range"
                name="range"
                id="range"
                class="range__slider"
                value="0"
                min="10"
                max="26"
                title="Adjust panel size"
              />
              <span id="max-range-value">26</span>
            </div>
          </section>
        </div>
      </div>
    </div>
    <KeyboardTrigger />
    <Help
      title="Panel"
      description="Use arrow keys to navigate through letters/numbers. Up/down for vertical orientation, left/right for horizontal. Type any letter or number to jump to it. Adjust panel size with the slider."
    />
  </Fragment>

  <article class="tv container__panel">
    <section class="scene">
      <letter-panel>
        <div class="panel" id="panel"></div>
      </letter-panel>
    </section>
  </article>
</BaseLayout>
<script>
  enum ArrowKeys {
    LEFT = 37,
    UP = 38,
    RIGHT = 39,
    DOWN = 40
  }

  enum ContentType {
    ALPHABET = "alphabet",
    NUMBERS = "numbers"
  }

  // Define the behaviour for our new type of HTML element.
  class LetterPanel extends HTMLElement {
    #panel: HTMLElement;
    #cellRange: HTMLInputElement;
    #minRangeValueSpan: HTMLElement;
    #maxRangeValueSpan: HTMLElement;
    #orientationPanel: NodeListOf<HTMLInputElement>;
    #contentTypePanel: NodeListOf<HTMLInputElement>;
    #orientation: "X" | "Y" = "Y";
    #contentType: ContentType = ContentType.ALPHABET;
    #selectedIndex = 0;
    #radius = "0px";
    #theta = 0;
    #angle = "0deg";

    constructor() {
      super();
      this.#panel = this.querySelector("#panel") as HTMLElement;
      this.#orientationPanel = document.querySelectorAll(".orientation");
      this.#contentTypePanel = document.querySelectorAll(".content-type");
      this.#cellRange = document.querySelector("#range") as HTMLInputElement;
      this.#minRangeValueSpan = document.querySelector("#min-range-value") as HTMLElement;
      this.#maxRangeValueSpan = document.querySelector("#max-range-value") as HTMLElement;
      this.updateRangeAttributes();
      this.buildPanel();
      this.#emitEvent();
    }

    connectedCallback() {
      this.changePanel();
      this.rotatePanel({ by: "Y" });
      (this.#orientationPanel[1] as HTMLInputElement).checked = true;
      (this.#contentTypePanel[0] as HTMLInputElement).checked = true;
    }

    #emitEvent() {
      document.addEventListener("keyup", (e: KeyboardEvent) => {
        const { charCode, code, keyCode, key } = e;
        console.log({ charCode, code, keyCode, key });
        this.onKeyChange(keyCode);
      });

      this.#orientationPanel.forEach((radio) => {
        radio.addEventListener(
          "click",
          (e: Event) => {
            const target = e.target as HTMLInputElement;
            this.#orientation = target.value as "X" | "Y";
            this.changePanel();
            target.blur(); //unfocus the radio button
          },
          false
        );
      });

      this.#contentTypePanel.forEach((radio) => {
        radio.addEventListener(
          "click",
          (e: Event) => {
            const target = e.target as HTMLInputElement;
            this.#contentType = target.value as ContentType;
            this.#selectedIndex = 0; // Reset index when content type changes
            this.updateRangeAttributes(); // Update range limits
            this.buildPanel(); // Rebuild panel with new content
            this.changePanel();
            target.blur();
          },
          false
        );
      });

      this.#cellRange.addEventListener("input", (e) => {
        const target = e.target as HTMLInputElement;
        const rangeBullet = document.querySelector("#range-bullet");
        if (rangeBullet) {
          rangeBullet.textContent = target.value;
        }
        this.buildPanel();
        this.changePanel();
      });
      this.#cellRange.addEventListener("change", () => {
        // Add change event for final blur
        this.#cellRange.blur();
      });

      const panelToolsPopover = document.getElementById("panelToolsPopover");
      const settingsButton = document.getElementById("settingsButton");
      // Panel tools logic
      if (settingsButton && panelToolsPopover) {
        settingsButton.addEventListener("click", (event) => {
          event.stopPropagation();
          const isOpen = panelToolsPopover.classList.contains("open");
          panelToolsPopover.classList.toggle("open", !isOpen);
          settingsButton.setAttribute("aria-expanded", String(!isOpen)); // Convert boolean to string
          panelToolsPopover.setAttribute("aria-hidden", String(isOpen)); // Convert boolean to string
        });

        document.addEventListener("click", (event) => {
          if (!panelToolsPopover.contains(event.target as Node) && !settingsButton.contains(event.target as Node)) {
            if (panelToolsPopover.classList.contains("open")) {
              settingsButton.setAttribute("aria-expanded", "false");
              panelToolsPopover.setAttribute("aria-hidden", "true");
              panelToolsPopover.classList.remove("open");
            }
          }
        });
      }
    }

    updateRangeAttributes() {
      if (this.#contentType === ContentType.ALPHABET) {
        this.#cellRange.min = "10";
        this.#cellRange.max = "26";
        this.#minRangeValueSpan.textContent = "10";
        this.#maxRangeValueSpan.textContent = "26";
        // Ensure current value is within bounds
        if (Number(this.#cellRange.value) < 10) this.#cellRange.value = "10";
        if (Number(this.#cellRange.value) > 26) this.#cellRange.value = "26";
      } else {
        // ContentType.NUMBERS
        this.#cellRange.min = "3";
        this.#cellRange.max = "10";
        this.#minRangeValueSpan.textContent = "3";
        this.#maxRangeValueSpan.textContent = "10";
        // Ensure current value is within bounds
        if (Number(this.#cellRange.value) < 3) this.#cellRange.value = "3";
        if (Number(this.#cellRange.value) > 10) this.#cellRange.value = "10";
      }
    }

    doTheMath() {
      const cellWidth = this.#panel.offsetWidth;
      const cellCount = Number(this.#cellRange.value);
      const halfCell = cellWidth / 2;
      const divideBy = Math.tan(Math.PI / cellCount);
      this.#radius = Math.round(halfCell / divideBy) + "px";
      this.#theta = 360 / cellCount;
      this.#angle = this.#theta * this.#selectedIndex + "deg";
    }

    buildPanel() {
      const count = Number(this.#cellRange.value);
      const fragment = document.createDocumentFragment();
      for (let i = 0; i < count; i++) {
        const div = document.createElement("div");
        div.classList.add("panel__cell");

        if (this.#contentType === ContentType.ALPHABET) {
          div.textContent = String.fromCodePoint(65 + i); // A to Z
        } else {
          // ContentType.NUMBERS
          div.textContent = String(i % 10); // 0-9, wraps around after 9
        }

        fragment.appendChild(div);
      }
      this.#panel.innerHTML = "";
      this.#panel.appendChild(fragment);
    }

    changePanel() {
      const cells = document.querySelectorAll(".panel__cell") as unknown as HTMLElement[];
      this.doTheMath();
      cells.forEach((cell, i) => {
        const cellAngle = this.#theta * i;
        const transformString = `rotate${this.#orientation}(${cellAngle}deg) translateZ(${this.#radius})`;
        cell.style.transform = transformString;
      });
      this.rotatePanel({ by: this.#orientation });
      this.updateFrontCell(); // update front cell styling
    }

    updateFrontCell() {
      const cells = this.#panel.querySelectorAll(".panel__cell") as NodeListOf<HTMLElement>;
      if (!cells.length) return;
      const count = cells.length;
      const normalizedIndex = ((this.#selectedIndex % count) + count) % count;

      cells.forEach((cell, index) => {
        cell.classList.remove("front");
        // Calculate which cell should be "front" based on rotation
        const adjustedIndex = (index + normalizedIndex) % count;
        if (adjustedIndex === 0) {
          // The cell that is currently at the 0-degree position (front)
          cell.classList.add("front");
        }
      });
    }

    rotatePanel({ by = "Y" }: { by?: "X" | "Y" }) {
      this.doTheMath();
      const transformString = `translateZ(-${this.#radius}) rotate${by}(${this.#angle})`;
      this.#panel.style.transform = transformString;
    }

    onKeyChange(code: number) {
      const VerticalButton = this.#orientationPanel[0] as HTMLInputElement;
      const horizontalButton = this.#orientationPanel[1] as HTMLInputElement;
      const currentPanelSize = Number(this.#cellRange.value);

      switch (code) {
        case ArrowKeys.RIGHT: {
          if (this.#orientation === "Y") {
            this.#selectedIndex--;
          } else {
            this.#selectedIndex++;
          }
          this.#orientation = "Y";
          horizontalButton.checked = true;
          break;
        }
        case ArrowKeys.LEFT: {
          if (this.#orientation === "Y") {
            this.#selectedIndex++;
          } else {
            this.#selectedIndex--;
          }
          this.#orientation = "Y";
          horizontalButton.checked = true;
          break;
        }
        case ArrowKeys.UP: {
          this.#selectedIndex++;
          this.#orientation = "X";
          VerticalButton.checked = true;
          break;
        }
        case ArrowKeys.DOWN: {
          this.#selectedIndex--;
          VerticalButton.checked = true;
          this.#orientation = "X";
          break;
        }
        default: {
          // Handle character input (alphabets and numbers)
          if (this.#contentType === ContentType.ALPHABET) {
            if (code >= 65 && code <= 90) {
              // A-Z (uppercase)
              this.#selectedIndex = (65 - code + currentPanelSize) % currentPanelSize; // Calculate index relative to A
            } else if (code >= 97 && code <= 122) {
              // a-z (lowercase)
              this.#selectedIndex = (97 - code + currentPanelSize) % currentPanelSize; // Calculate index relative to a
            } else {
              // If not an alphabet, just move forward
              this.#selectedIndex++;
            }
          } else {
            // ContentType.NUMBERS
            if (code >= 48 && code <= 57) {
              // 0-9
              this.#selectedIndex = (48 - code + currentPanelSize) % currentPanelSize; // Calculate index relative to 0
            } else {
              // If not a number, just move forward
              this.#selectedIndex++;
            }
          }
        }
      }
      this.#selectedIndex = ((this.#selectedIndex % currentPanelSize) + currentPanelSize) % currentPanelSize;
      this.changePanel();
    }
  }
  // Tell the browser to use our LetterPanel class for <letter-panel> elements.
  customElements.define("letter-panel", LetterPanel);
</script>
