---
import "@/assets/styles/menu.css";
import HamIcon from "@/assets/icons/ham.svg";
import ArrowIcon from "@/assets/icons/arrow.svg";
import ToggleIcon from "@/assets/icons/toggle.svg";
import Navigation from "@/layouts/Navigation";
import { NavbarLinks } from "@/utils/constants";
---

<button class="menu-button" popovertarget="nav" popovertargetaction="toggle">
  <HamIcon width={24} height={24} />
</button>

<div class="sidebar_layout">
  <aside popover="auto" id="nav">
    <button class="menu-button hider" popovertarget="nav" aria-label="Close drawer">
      <span class="sr-only">Close drawer</span>
    </button>

    <Navigation pages={NavbarLinks} />

    <div class="actions">
      <button class="menu-button minimize-toggle" aria-label="Toggle menu size">
        <ArrowIcon width={24} height={24} style={{ transform: "rotate(-135deg)" }} />
      </button>
      <button class="menu-button theme-toggle" aria-label="Toggle theme">
        <ToggleIcon width={24} height={24} />
      </button>
      <button class="menu-button placement-toggle">
        <ArrowIcon width={24} height={24} />
      </button>
    </div>
  </aside>
</div>

<script>
  const popover = document.querySelector("#nav") as HTMLElement & { hidePopover: () => void };
  const themeBtn = document.querySelector(".theme-toggle") as HTMLButtonElement;
  const placer = document.querySelector(".placement-toggle") as HTMLButtonElement;
  const hider = document.querySelector(".hider") as HTMLElement;
  const minimizeBtn = document.querySelector(".minimize-toggle") as HTMLButtonElement;
  const nav = document.querySelector("#nav") as HTMLElement;

  let debounce: number | undefined;
  document.documentElement.dataset.resizing = String(false);
  document.documentElement.dataset.placement = "top";

  themeBtn?.addEventListener("click", () => {
    const current = document.documentElement.dataset.theme || "system";
    const themes = ["system", "light", "dark"];
    const currentIndex = themes.indexOf(current);
    const nextIndex = (currentIndex + 1) % themes.length;
    const next = themes[nextIndex];
    document.dispatchEvent(new CustomEvent("theme-change", { detail: { theme: next } }));
  });

  window.addEventListener("resize", () => {
    if (popover?.matches(":popover-open")) {
      popover.hidePopover();
    }
    document.documentElement.dataset.resizing = String(true);
    if (debounce) clearTimeout(debounce);
    debounce = window.setTimeout(() => {
      document.documentElement.dataset.resizing = String(false);
    }, 200);
  });

  placer?.addEventListener("click", () => {
    document.documentElement.dataset.placement =
      document.documentElement.dataset.placement === "top" ? "bottom" : "top";
  });

  hider?.removeAttribute("popovertargetaction");

  popover?.addEventListener("toggle", () => {
    document.documentElement.dataset.complete = String(false);
    document.documentElement.style.setProperty("--complete", "0");
    nav.classList.remove("minimized");

    popover.style.setProperty("--ty", "0");
  });

  minimizeBtn?.addEventListener("click", () => {
    if (nav && minimizeBtn) {
      nav.classList.toggle("minimized");
      minimizeBtn.classList.toggle("rotated");
      minimizeBtn.setAttribute("title", nav.classList.contains("minimized") ? "Open sidebar" : "Close sidebar");
    }
  });
</script>
