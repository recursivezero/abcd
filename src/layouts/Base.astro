---
import ThemeProvider from "@/components/ThemeProvider.astro";
import BaseHead from "@/layouts/BaseHead";
import Footer from "@/layouts/common/Footer";
import Header from "@/layouts/common/Header";
import Menu from "@/layouts/common/Menu";
import { siteConfig } from "@/site-config";
import Shortcut from "@/components/Shortcut.astro";

const {
  meta: { title, description = siteConfig.description, ogImage },
  sidebar = true,
  meta
} = Astro.props;
---

<html lang={siteConfig.lang} data-theme="system">
  <head>
    <BaseHead title={title} description={description} ogImage={ogImage} />
  </head>
  <body id="body" class="body__container">
    <ThemeProvider />
    <Shortcut />
    <Header title={title}>
  <slot name="header-left" slot="left" />
  <slot name="header-right" slot="right" />
</Header>
    <main id="main" class="main">
      <div class="sidebar">{sidebar && <Menu />}</div>
      <div class="content">
        <slot><p>This is my fallback content, if there is no child passed into slot</p></slot>
      </div>
    </main>
    <Footer />
    <script>
      if ("serviceWorker" in navigator) {
        // Always unregister existing workers first
        navigator.serviceWorker
          .getRegistrations()
          .then((registrations) => {
            // Unregister all existing service workers
            const unregisterPromises = registrations.map((registration) => {
              return registration.unregister().then((success) => {
                if (success) {
                  console.log("Successfully unregistered service worker:", registration.scope);
                } else {
                  console.warn("Failed to unregister service worker:", registration.scope);
                }
                return success;
              });
            });

            // Wait for all unregister to complete
            return Promise.all(unregisterPromises);
          })
          .then(() => {
            // Only register new service worker in production
            if (!import.meta.env.DEV) {
              // or `process.env.NODE_ENV !== 'development'`
              window.addEventListener("load", () => {
                navigator.serviceWorker
                  .register("/service-worker.js")
                  .then((registration) => {
                    console.log("Service Worker successfully registered:", registration.scope);
                    // Optional: Check for updates
                    registration.update().then(() => {
                      console.log("Service Worker checked for updates");
                    });
                  })
                  .catch((error) => {
                    console.error("Service Worker registration failed:", error);
                  });
              });
            } else {
              console.log("Service Worker registration skipped in development mode");
            }
          })
          .catch((error) => {
            console.error("Service Worker cleanup failed:", error);
          });
      }
    </script>
  </body>
</html>
