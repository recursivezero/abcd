---
import { SocialShare } from "astro-social-share";
import ShareIcon from "@/assets/icons/share.svg";
import "@/assets/styles/share-button.css";
---

<div class="share-button-container">
  <button id="shareTrigger" class="share-trigger-button" aria-label="Share" data-tooltip="Share">
    <ShareIcon />
  </button>

  <div id="sharePopover" class="share-popover">
    <div class="popover-header"></div>
    <div class="popover-content">
      <h3 class="popover-title">Share the page!</h3>
      <p class="popover-description">
        Share the page with the world!
      </p>
    </div>

    <div class="social-share-section">
      <div class="astro-social-share">
        <SocialShare
          description={Astro.props.description || "Check out this amazing page!"}
          title={Astro.props.title || "My Awesome Page"}
        />
      </div>
    </div>

    <div class="copy-link-section">
      <span class="share-link-label">Share the link:</span>
      <div class="copy-input-container">
        <input type="text" id="copyUrlInput" class="copy-url-input" readonly value={Astro.url.href} />
        <button id="copyUrlButton" class="copy-link-button">
          <span>Copy</span>
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const shareTrigger = document.getElementById("shareTrigger")! as HTMLButtonElement;
    const sharePopover = document.getElementById("sharePopover")! as HTMLDivElement;
    const copyUrlInput = document.getElementById("copyUrlInput")! as HTMLInputElement;
    const copyUrlButton = document.getElementById("copyUrlButton")! as HTMLButtonElement;

    function togglePopover() {
      sharePopover.classList.toggle("is-open");
      const isExpanded = sharePopover.classList.contains("is-open");
      shareTrigger.setAttribute("aria-expanded", String(isExpanded));
    }

    shareTrigger.addEventListener("click", (event) => {
      event.stopPropagation();
      togglePopover();
    });

    document.addEventListener("click", (event) => {
      if (event.target instanceof Element) {
        if (!sharePopover.contains(event.target) && event.target !== shareTrigger) {
          if (sharePopover.classList.contains("is-open")) {
            togglePopover();
          }
        }
      }
    });

    copyUrlButton.addEventListener("click", async () => {
      const currentUrl = copyUrlInput.value;
      try {
        await navigator.clipboard.writeText(currentUrl);
        const originalText = copyUrlButton.querySelector("span")!.textContent;
        copyUrlButton.querySelector("span")!.textContent = "Copied!";
        setTimeout(() => {
          copyUrlButton.querySelector("span")!.textContent = originalText;
        }, 1500);
      } catch (err) {
        alert("Failed to copy URL. Please copy it manually: " + currentUrl);
      }
    });
    shareTrigger.setAttribute("aria-expanded", "false");
  });
</script>
