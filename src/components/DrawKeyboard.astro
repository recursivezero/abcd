---
import { alphabetMapper } from "@/mappers/alphabet";
import { IMAGE_DIR, colorBox, fontBox, numberBox } from "@/utils/draw";
//import "@/assets/styles/draw.css";
---

<div class="container">
  <header class="header">
    <div class="action">
      <!--<a href="/" class="back-button" aria-label="Go back" title="Go back">‚Üê Back</a>-->
    </div>
    <!-- The caption div is removed; the heading now appears directly in the header -->
    <h1 class="info" aria-live="polite">Press any key</h1>
  </header>

  <main class="main">
    <section class="board" id="board" aria-live="polite">
      <div class="char" id="char"></div>
    </section>
  </main>
</div>

<script
  define:vars={{
    colorBox,
    fontBox,
    numberBox,
    alphabetMapper,
    IMAGE_DIR
  }}
  is:inline
>
  // Initialize state
  let currentFontIndex = 0;
  let isUpperCase = true;

  // DOM elements
  const mainEl = document.querySelector("main");
  const boardDiv = document.getElementById("board");
  const charDiv = document.getElementById("char");
  const toggleCaseSwitch = document.getElementById("toggleCase");
  const toggleFontSwitch = document.getElementById("toggleFont");
  const toggleBackgroundSwitch = document.getElementById("toggleBg");
  const info = document.querySelector(".info");
  const textSpan = document.getElementById("text");

  function getRandomValue(arr) {
    return arr[Math.floor(Math.random() * arr.length)];
  }

  function updateDisplay(key) {
    try {
      const audio = new Audio("data:audio/wav;base64,UklGRggAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhBAAAAAEA");
      audio.volume = 0.1;
      audio.play().catch(() => {});
    } catch (error) {
      console.log("Audio feedback unavailable");
    }

    if (!isNaN(Number(key))) {
      boardDiv.style.backgroundColor = getRandomValue(colorBox);
      boardDiv.style.backgroundImage = "";
      charDiv.textContent = key;
      info.textContent = numberBox[key] || "Unknown";
      return;
    }

    const found = alphabetMapper.find((alpha) => alpha.key.toUpperCase() === key.toUpperCase());
    if (found) {
      info.textContent = found.value;
      if (!toggleBackgroundSwitch.checked) {
        boardDiv.style.backgroundImage = `url(${IMAGE_DIR}/${found.value}.jpg)`;
        boardDiv.style.backgroundColor = "";
      }
    } else {
      boardDiv.style.backgroundImage = "";
    }

    charDiv.textContent = isUpperCase ? key.toUpperCase() : key.toLowerCase();
  }

  function handleKeyPress(e) {
    const key = e.key;
    if (key.length === 1 && /[a-zA-Z0-9]/.test(key)) {
      updateDisplay(key);
    }
  }

  toggleCaseSwitch?.addEventListener("change", (e) => {
    isUpperCase = !e.target.checked;
    const currentText = charDiv.textContent;
    charDiv.textContent = isUpperCase ? currentText.toUpperCase() : currentText.toLowerCase();
    textSpan.setAttribute("aria-checked", !e.target.checked);
  });

  toggleFontSwitch?.addEventListener("change", () => {
    currentFontIndex = (currentFontIndex + 1) % fontBox.length;
    charDiv.style.fontFamily = fontBox[currentFontIndex];
  });

  toggleBackgroundSwitch?.addEventListener("change", (e) => {
    if (e.target.checked) {
      mainEl.style.backgroundBlendMode = "soft-light";
      mainEl.style.filter = "brightness(0.9)";
      boardDiv.style.backgroundImage = "none";
      boardDiv.style.backgroundColor =
        getRandomValue(colorBox) || getComputedStyle(document.documentElement).getPropertyValue("--solid-bg");
    } else {
      mainEl.style.backgroundBlendMode = "normal";
      mainEl.style.filter = "brightness(1)";
      boardDiv.style.backgroundColor = "";
    }
  });

  document.addEventListener("keydown", handleKeyPress);
</script>

<style>
  :root {
    --primary-bg: linear-gradient(135deg, #e0e7ff 0%, #a5b4fc 100%);
    --header-bg: #f9fafb;
    --accent-color: #4338ca;
    --control-bg: rgba(255, 255, 255, 0.95);
    --text-color: #ffffff;
    --solid-bg: #a5b4fc;
    --shadow: 0 6px 12px -2px rgba(0, 0, 0, 0.1), 0 3px 6px -3px rgba(0, 0, 0, 0.08);
    --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
    --light-border: #e2e8f0;
  }

  * {
    box-sizing: border-box;
    margin: auto;
    padding: 0;
  }

  .container {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    font-family: "Inter", system-ui, sans-serif;
    text-align: center;
    padding: 1rem;
    /*background: var(--primary-bg);*/
  }

  .header {
    display: flex;
    flex-direction: column;
    align-items: center;
    width: 50%;
    padding: 1.5rem 2rem;
    gap: 1rem;
    position: sticky; /* Make the header sticky */
    top: 0; /* Stick to the top of the viewport */
    z-index: 100; /* Ensure it stays above other content */
    background: rgb(224, 222, 222);
    border: 1px solid var(--light-border);
    border-radius: 12px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
    margin-bottom: 0.5rem;
    border-color: #4338ca;
    border-width: 4px;
  }

  .action {
    width: 100%;
  }

  /* The caption div is removed so the heading appears directly in the header */
  .info {
    margin-top: -25px;
    color: rgb(29, 25, 25); /* Text is now black */
    font-weight: 500;
    text-align: center;
    text-transform: uppercase;
    font-size: 2rem;
  }

  .controls {
    position: absolute;
    top: 1rem;
    right: 1rem;
    display: flex;
    gap: 1rem;
    align-items: center;
  }

  .control-item {
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .control-button {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 4.5rem;
    height: 4.5rem;
    background: var(--control-bg);
    border-radius: 0.75rem;
    cursor: pointer;
    position: relative;
    overflow: hidden;
    border: 2px solid rgba(67, 56, 202, 0.2);
    transition: var(--transition);
    box-shadow: var(--shadow);
    font-size: 2rem;
    color: black;
  }

  .control-button::before {
    content: "";
    position: absolute;
    z-index: 1;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: var(--accent-color);
    transform: scaleX(0);
    transform-origin: 0 50%;
    transition: transform 0.3s ease-out;
    opacity: 0.1;
  }

  .control-button:hover::before {
    transform: scaleX(1);
  }

  .control-button:hover {
    transform: translateY(-3px);
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
  }

  .main {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 100%;
    height: calc(100vh - 120px);
    overflow: hidden;
    transition: var(--transition);
    margin-top: 1rem;
  }

  .board {
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
    width: 100%;
    height: 100%;
    overflow: hidden;
    padding: 2rem;
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
    transition: var(--transition);
    border: 2px solid var(--accent-color);
    border-radius: 1rem;
  }

  .char {
    position: relative;
    z-index: 2;
    text-align: center;
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: clamp(10rem, 30vw, 25rem);
    font-weight: 800;
    color: white;
    text-shadow: 0 6px 20px rgba(0, 0, 0, 0.4);
    transition: var(--transition);
    animation: charReveal 0.4s ease-out;
    will-change: transform, opacity;
  }

  @keyframes charReveal {
    from {
      opacity: 0;
      transform: scale(0.8);
    }
    to {
      opacity: 1;
      transform: scale(1);
    }
  }

  .visually-hidden {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }

  @media (max-width: 640px) {
    .header {
      padding: 1rem;
    }

    .info {
      font-size: 1.25rem;
    }

    .char {
      font-size: clamp(4rem, 25vw, 15rem);
    }

    .control-button {
      width: 3rem;
      height: 3rem;
      font-size: 1.5rem;
    }

    .controls {
      position: static;
      justify-content: center;
      width: 100%;
    }
  }
</style>
