---
const wordSets = {
  easy: ["CAT", "DOG", "PIG", "COW", "HEN"],
  medium: ["BIRD", "FISH", "DUCK", "FROG", "BEAR"],
  hard: ["MONKEY", "RABBIT", "GIRAFFE", "ZEBRA", "TIGER"]
};

const clues = {
  easy: {
    "CAT": "A small furry animal that purrs",
    "DOG": "Man's best friend",
    "PIG": "Pink farm animal that loves mud",
    "COW": "Produces milk and says 'moo'",
    "HEN": "A female chicken that lays eggs"
  },
  medium: {
    "BIRD": "Flies in the sky and builds nests",
    "FISH": "Swims in water and has gills",
    "DUCK": "Quacks and waddles near ponds",
    "FROG": "Jumps and lives near water",
    "BEAR": "A large mammal that loves honey"
  },
  hard: {
    "MONKEY": "A playful primate with a tail",
    "RABBIT": "A fast hopper with long ears",
    "GIRAFFE": "The tallest animal with a long neck",
    "ZEBRA": "A striped animal from Africa",
    "TIGER": "A big cat with stripes"
  }
};

const initialSize = {
  easy: 8,
  medium: 10,
  hard: 12
};
---

<div class="puzzle-container">
  <div class="controls">
    <select class="difficulty-select" id="difficulty">
      <option value="easy">Easy (Ages 3-5)</option>
      <option value="medium">Medium (Ages 5-6)</option>
      <option value="hard">Hard (Ages 7-8)</option>
    </select>
    <button class="new-puzzle-btn" id="newPuzzle">New Puzzle</button>
    <button class="solution-btn" id="toggleSolution">Show Solution</button>
    <button class="clear-btn" id="clearSelection">Clear Selection</button>
  </div>

  <div class="stats">
    <span>Clicks: <span id="clickCount">0</span></span>
    <span>Found: <span id="foundCount">0</span>/<span id="totalWords">5</span></span>
  </div>

  <div class="clues-container">
    <div class="clues-column">
      <h3>Across</h3>
      <div id="acrossClues"></div>
    </div>
    <div class="clues-column">
      <h3>Down</h3>
      <div id="downClues"></div>
    </div>
  </div>

  <div class="grid" id="grid"></div>
</div>

<style>
  .puzzle-container {
    max-width: 1000px;
    margin: 0 auto;
    padding: 20px;
    font-family: Arial, sans-serif;
  }

  .clues-container {
    display: flex;
    gap: 40px;
    margin: 20px 0;
  }

  .clues-column {
    flex: 1;
  }

  .clue-item {
    margin: 5px 0;
    padding: 5px;
    cursor: pointer;
  }

  .clue-item:hover {
    background-color: #f0f0f0;
  }

  .clue-number {
    font-weight: bold;
    margin-right: 8px;
  }

  .grid {
    display: grid;
    gap: 1px;
    background: #333;
    padding: 2px;
    touch-action: none;
    border-radius: 4px;
  }

  .cell {
    aspect-ratio: 1;
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    background: white;
    font-weight: bold;
    font-size: 1.1em;
    cursor: pointer;
  }

  .cell-number {
    position: absolute;
    top: 2px;
    left: 2px;
    font-size: 0.6em;
    color: #666;
  }

  .cell.selected {
    background-color: #b3d9ff;
  }

  .cell.match {
    background-color: #90EE90;
  }

  .controls {
    margin-bottom: 20px;
    display: flex;
    gap: 10px;
    flex-wrap: wrap;
  }

  button, select {
    padding: 8px 12px;
    border: 1px solid #ccc;
    border-radius: 4px;
    cursor: pointer;
    background: white;
    transition: all 0.2s;
  }

  button:hover, select:hover {
    background: #f0f0f0;
  }

  .stats {
    display: flex;
    gap: 20px;
    margin: 10px 0;
    font-weight: bold;
  }
</style>

<script client:load>
  let state = {
    difficulty: 'easy',
    grid: [],
    size: initialSize.easy,
    words: [],
    clues: [],
    foundWords: [],
    selectedCells: [],
    clickCount: 0,
    showSolution: false
  };

  const generateEmptyGrid = (size) => 
    Array(size).fill().map(() => Array(size).fill(''));

  const canPlaceWord = (grid, word, row, col, dRow, dCol) => {
    if (row + dRow * word.length >= grid.length || row < 0) return false;
    if (col + dCol * word.length >= grid[0].length || col < 0) return false;
    
    for (let i = 0; i < word.length; i++) {
      const current = grid[row + dRow * i][col + dCol * i];
      if (current !== '' && current !== word[i]) return false;
    }
    return true;
  };

  const placeWord = (grid, word, clueNumber) => {
    const directions = [
      [0, 1], // horizontal
      [1, 0], // vertical
    ];
    const attempts = 100;

    for (let attempt = 0; attempt < attempts; attempt++) {
      const direction = directions[Math.floor(Math.random() * directions.length)];
      const row = Math.floor(Math.random() * (grid.length - word.length * direction[0]));
      const col = Math.floor(Math.random() * (grid[0].length - word.length * direction[1]));

      if (canPlaceWord(grid, word, row, col, direction[0], direction[1])) {
        for (let i = 0; i < word.length; i++) {
          grid[row + direction[0] * i][col + direction[1] * i] = word[i];
        }
        return {
          word,
          row,
          col,
          dir: direction,
          clue: clueNumber
        };
      }
    }
    return null;
  };

  const generateCrossword = () => {
    const size = initialSize[state.difficulty];
    let grid = generateEmptyGrid(size);
    const words = wordSets[state.difficulty].sort((a, b) => b.length - a.length);
    const placedWords = [];
    let clueNumber = 1;

    words.forEach(word => {
      const placedWord = placeWord(grid, word, clueNumber);
      if (placedWord) {
        placedWords.push(placedWord);
        clueNumber++;
      }
    });

    // Fill empty spaces with random letters
    for (let i = 0; i < size; i++) {
      for (let j = 0; j < size; j++) {
        if (!grid[i][j]) {
          grid[i][j] = String.fromCharCode(65 + Math.floor(Math.random() * 26));
        }
      }
    }

    state.grid = grid;
    state.words = placedWords;
    state.size = size;
  };

  const updateUI = () => {
    const gridElement = document.getElementById('grid');
    gridElement.style.gridTemplateColumns = `repeat(${state.size}, 1fr)`;
    gridElement.innerHTML = '';

    state.grid.forEach((row, i) => {
      row.forEach((letter, j) => {
        const cell = document.createElement('div');
        cell.className = 'cell';
        cell.textContent = letter;
        cell.dataset.coords = `${i}-${j}`;

        // Add clue numbers
        const wordInfo = state.words.find(w =>
          (w.row === i && w.col === j) ||
          (w.dir[0] === 1 && w.row <= i && i < w.row + w.word.length && w.col === j) ||
          (w.dir[1] === 1 && w.col <= j && j < w.col + w.word.length && w.row === i)
        );
        
        if (wordInfo && wordInfo.row === i && wordInfo.col === j) {
          const numberSpan = document.createElement('span');
          numberSpan.className = 'cell-number';
          numberSpan.textContent = wordInfo.clue;
          cell.appendChild(numberSpan);
        }

        gridElement.appendChild(cell);
      });
    });

    // Update clues
    const across = state.words.filter(w => w.dir[1] === 1);
    const down = state.words.filter(w => w.dir[0] === 1);
    
    document.getElementById('acrossClues').innerHTML = across
      .map(w => `<div class="clue-item">
        <span class="clue-number">${w.clue}.</span>
        ${clues[state.difficulty][w.word]}
      </div>`).join('');

    document.getElementById('downClues').innerHTML = down
      .map(w => `<div class="clue-item">
        <span class="clue-number">${w.clue}.</span>
        ${clues[state.difficulty][w.word]}
      </div>`).join('');
  };

  document.addEventListener('DOMContentLoaded', () => {
    generateCrossword();
    updateUI();

    document.getElementById('difficulty').addEventListener('change', (e) => {
      state.difficulty = e.target.value;
      generateCrossword();
      updateUI();
    });

    document.getElementById('newPuzzle').addEventListener('click', () => {
      generateCrossword();
      updateUI();
    });

    document.getElementById('toggleSolution').addEventListener('click', () => {
      state.showSolution = !state.showSolution;
      updateUI();
    });
  });
</script>