---
import Settings from "@/components/Settings.astro";
---

<div class="puzzle-container">
  <Settings />
  <details open>
    <summary>Word List</summary>
    <div class="word-list" id="wordList"></div>
  </details>

  <div class="stats-container">
    <div class="stats-button">
      <span>Clicks: <span id="clickCount">0</span></span>
    </div>
    <div class="stats-button">
      <span>Found: <span id="foundCount">0</span>/<span id="totalWords"></span></span>
    </div>
    <button id="solutionBtn" class="control-btn"> Hint </button>
  </div>

  <div id="grid" class="grid__puzzle"></div>

  <script type="module" is:inline>
    const getRandomColor = () => {
      // Changing the color generation for better visibility in help mode
      // Using more pastel colors with higher lightness and lower alpha
      const hue = Math.floor(Math.random() * 360); // Random hue (0-359)
      const saturation = 80 + Math.floor(Math.random() * 15);
      const lightness = 70 + Math.floor(Math.random() * 15);
      const alpha = 0.7;
      return `hsla(${hue}, ${saturation}%, ${lightness}%, ${alpha})`;
    };

    async function fetchCrosswordData() {
      try {
        const response = await fetch("/json/cross.json");
        if (!response.ok) {
          throw new Error("Failed to fetch crossword data");
        }
        return await response.json();
      } catch (error) {
        console.error(error);
        return [];
      }
    }

    document.addEventListener("DOMContentLoaded", async () => {
      const crosswordData = await fetchCrosswordData();
      console.log({ crosswordData });

      // Use the imported JSON data for word sets.
      const wordSets = crosswordData;
      console.log({ wordSets });
      let currentWordSetIndex = 0;

      // Function to generate random colors with good contrast

      // Pre-generated color classes for found words
      const colorClasses = [
        "word-color-1",
        "word-color-2",
        "word-color-3",
        "word-color-4",
        "word-color-5",
        "word-color-6",
        "word-color-7",
        "word-color-8"
      ];

      let state = {
        difficulty: "easy",
        grid: [],
        size: 8,
        selectedCells: [],
        foundWords: [],
        isDragging: false,
        showSolution: false,
        solutions: [],
        clickCount: 0,
        matchedCells: new Map(), // Changed to Map to store word-cells associations
        currentWordSet: wordSets[0],
        // We'll now store individual colors for each word in the solution
        solutionColors: new Map(), // Map of word -> color
        wordColors: new Map() // Track colors assigned to found words
      };

      console.log({ state });

      function generateRandomLetter() {
        return String.fromCharCode(65 + Math.floor(Math.random() * 26));
      }

      function getWordDirection(cells) {
        const [[r1, c1], [r2, c2]] = [cells[0], cells[cells.length - 1]];
        return r1 === r2 ? "horizontal" : c1 === c2 ? "vertical" : "diagonal";
      }

      function canPlaceWord(grid, word, row, col, dRow, dCol) {
        if (row + dRow * (word.length - 1) >= state.size || row + dRow * (word.length - 1) < 0) return false;
        if (col + dCol * (word.length - 1) >= state.size || col + dCol * (word.length - 1) < 0) return false;

        for (let i = 0; i < word.length; i++) {
          const currentCell = grid[row + dRow * i][col + dCol * i];
          if (currentCell && currentCell !== word[i]) return false;
        }
        return true;
      }

      function placeWord(grid, word) {
        const directions = [
          [0, 1],
          [1, 0],
          [1, 1],
          [1, -1]
        ];
        for (let attempt = 0; attempt < 200; attempt++) {
          const [dRow, dCol] = directions[Math.floor(Math.random() * directions.length)];
          const row = Math.floor(Math.random() * state.size);
          const col = Math.floor(Math.random() * state.size);

          if (canPlaceWord(grid, word, row, col, dRow, dCol)) {
            const wordCells = [];
            for (let i = 0; i < word.length; i++) {
              const r = row + dRow * i;
              const c = col + dCol * i;
              grid[r][c] = word[i];
              wordCells.push([r, c]);
            }
            return { placed: true, cells: wordCells, direction: getWordDirection(wordCells) };
          }
        }
        return { placed: false, cells: [], direction: null };
      }

      function generateRandomColors() {
        // Clear existing solution colors
        state.solutionColors.clear();

        // Define a set of distinct, high-contrast colors for better help visibility
        // Using a predefined palette for help mode instead of fully random colors
        const helpColorPalette = [
          "hsla(10, 90%, 75%, 0.75)", // Light red
          "hsla(40, 90%, 75%, 0.75)", // Light amber
          "hsla(60, 90%, 75%, 0.75)", // Light yellow
          "hsla(120, 90%, 75%, 0.75)", // Light green
          "hsla(180, 90%, 75%, 0.75)", // Light cyan
          "hsla(210, 90%, 75%, 0.75)", // Light blue
          "hsla(270, 90%, 75%, 0.75)", // Light purple
          "hsla(300, 90%, 75%, 0.75)", // Light magenta
          "hsla(330, 90%, 75%, 0.75)", // Light pink
          "hsla(150, 90%, 75%, 0.75)", // Light teal
          "hsla(30, 90%, 75%, 0.75)", // Light orange
          "hsla(240, 90%, 75%, 0.75)" // Light indigo
        ];

        // Assign colors to words, trying to use different colors for adjacent words
        let colorIndex = 0;
        state.solutions.forEach((solution) => {
          state.solutionColors.set(solution.word, helpColorPalette[colorIndex % helpColorPalette.length]);
          colorIndex++;
        });
      }

      function resetPuzzle() {
        generatePuzzleWithCurrentWordSet();
      }

      function generatePuzzleWithCurrentWordSet() {
        // Adjust grid size based on difficulty
        // For now, we'll keep the grid size constant for all difficulties
        // We can adjust this based on the difficulty level in the future
        // change size according to needs
        switch (state.difficulty) {
          case "easy":
            state.size = 8;
            break;
          case "medium":
            state.size = 8;
            break;
          case "hard":
            state.size = 8;
            break;
        }

        const newGrid = Array(state.size)
          .fill()
          .map(() => Array(state.size).fill(""));
        const words = state.currentWordSet[state.difficulty];
        state.solutions = [];
        state.wordColors.clear();
        state.matchedCells.clear();
        state.solutionColors.clear();

        words.forEach((word) => {
          const result = placeWord(newGrid, word);
          if (result.placed) {
            state.solutions.push({ word, cells: result.cells, direction: result.direction });
            // Assign a random color to each word solution
            state.solutionColors.set(word, getRandomColor());
          }
        });

        for (let i = 0; i < state.size; i++) {
          for (let j = 0; j < state.size; j++) {
            newGrid[i][j] = newGrid[i][j] || generateRandomLetter();
          }
        }

        state.grid = newGrid;
        state.foundWords = [];
        state.showSolution = false;
        state.selectedCells = [];
        state.clickCount = 0;

        updateDOM();
      }

      function generateNewPuzzle() {
        currentWordSetIndex = (currentWordSetIndex + 1) % wordSets.length;
        state.currentWordSet = wordSets[currentWordSetIndex];
        generatePuzzleWithCurrentWordSet();
      }

      function isValidNextCell(current, next) {
        const [r1, c1] = current;
        const [r2, c2] = next;
        return Math.abs(r1 - r2) <= 1 && Math.abs(c1 - c2) <= 1;
      }

      function checkForWord(selection) {
        if (selection.length < 3) return false;

        const word = selection.map(([r, c]) => state.grid[r][c]).join("");
        const reverseWord = word.split("").reverse().join("");
        const currentWords = state.currentWordSet[state.difficulty];

        let foundWord = null;
        if (currentWords.includes(word) && !state.foundWords.includes(word)) {
          foundWord = word;
        } else if (currentWords.includes(reverseWord) && !state.foundWords.includes(reverseWord)) {
          foundWord = reverseWord;
        }

        if (foundWord) {
          state.foundWords.push(foundWord);
          // Assign a color to the word
          if (!state.wordColors.has(foundWord)) {
            const colorIndex = state.wordColors.size % colorClasses.length;
            state.wordColors.set(foundWord, colorClasses[colorIndex]);
          }
          // Store the cells associated with this word
          state.matchedCells.set(foundWord, [...selection]); // Create a copy of the selection
          return true;
        }
        return false;
      }

      function getCellCoordinates(element) {
        if (!element?.dataset?.coords) return null;
        return element.dataset.coords.split("-").map(Number);
      }

      function updateDOM() {
        const gridElement = document.getElementById("grid");
        gridElement.innerHTML = "";
        gridElement.style.gridTemplateColumns = `repeat(${state.size}, 1fr)`;

        state.grid.forEach((row, i) =>
          row.forEach((cell, j) => {
            const cellElement = document.createElement("div");
            cellElement.className = "cell";
            cellElement.textContent = cell;
            cellElement.dataset.coords = `${i}-${j}`;

            const isSelected = state.selectedCells.some(([r, c]) => r === i && c === j);

            // Find if this cell belongs to any found word
            let matchedWord = null;
            for (const [word, cells] of state.matchedCells.entries()) {
              if (cells.some(([r, c]) => r === i && c === j)) {
                matchedWord = word;
                break;
              }
            }

            // Check if this cell is part of a solution
            if (state.showSolution) {
              // Find which solution word this cell belongs to
              for (const solution of state.solutions) {
                if (solution.cells.some(([r, c]) => r === i && c === j)) {
                  // Apply the unique color for this word
                  const wordColor = state.solutionColors.get(solution.word);
                  if (wordColor) {
                    cellElement.style.backgroundColor = wordColor;
                  }
                  break;
                }
              }
            }

            if (isSelected) cellElement.classList.add("selected");
            if (matchedWord) {
              cellElement.classList.add("match");
              const colorClass = state.wordColors.get(matchedWord);
              if (colorClass) {
                cellElement.classList.add(colorClass);
              }
            }

            gridElement.appendChild(cellElement);
          })
        );

        document.getElementById("clickCount").textContent = state.clickCount;
        document.getElementById("foundCount").textContent = state.foundWords.length;
        document.getElementById("totalWords").textContent = state.currentWordSet[state.difficulty].length;

        const wordList = document.getElementById("wordList");
        wordList.innerHTML = state.currentWordSet[state.difficulty]
          .map((word) => {
            const isFound = state.foundWords.includes(word);
            const colorClass = state.wordColors.get(word) || "";

            // For words in solution mode, set the background color directly
            let style = "";
            if (state.showSolution) {
              const solutionColor = state.solutionColors.get(word);
              if (solutionColor) {
                style = `style="background-color: ${solutionColor};"`;
              }
            }

            return `<span class="word ${isFound ? "found " + colorClass : ""}" ${style}>${word}</span>`;
          })
          .join("");
      }

      function handleCellClick(e) {
        const coords = getCellCoordinates(e.target);
        if (!coords) return;

        // Check if the cell is already selected
        const isAlreadySelected = state.selectedCells.some(([r, c]) => r === coords[0] && c === coords[1]);

        if (isAlreadySelected) {
          // If the cell is already selected, do nothing
          return;
        }

        // Add the new cell to the selection
        state.selectedCells.push(coords);
        state.clickCount++;

        // Update the DOM to reflect the new selection
        updateDOM();
      }

      function handleDragStart(e) {
        const coords = getCellCoordinates(e.target);
        if (!coords) return;

        state.isDragging = true;
        state.selectedCells = [coords];
        state.clickCount++;
        updateDOM();
      }

      function handleDragMove(e) {
        if (!state.isDragging) return;

        const element = document.elementFromPoint(
          e.type.includes("touch") ? e.touches[0].clientX : e.clientX,
          e.type.includes("touch") ? e.touches[0].clientY : e.clientY
        );

        const coords = getCellCoordinates(element);
        if (!coords) return;

        const lastCell = state.selectedCells[state.selectedCells.length - 1];
        if (!lastCell || !isValidNextCell(lastCell, coords)) return;

        if (!state.selectedCells.some(([r, c]) => r === coords[0] && c === coords[1])) {
          state.selectedCells.push(coords);
          updateDOM();
        }
      }

      function handleDragEnd() {
        if (!state.isDragging) return;

        const wasWordFound = checkForWord(state.selectedCells);
        state.isDragging = false;

        if (!wasWordFound) {
          state.selectedCells = [];
        }

        updateDOM();
      }

      // Function to handle help button click
      function handleHelpButtonClick() {
        // Generate new random colors for each word
        generateRandomColors();

        // Toggle solution display
        state.showSolution = !state.showSolution;

        // Update the DOM
        updateDOM();
      }
      function handleClearButtonClick() {
        state.selectedCells = [];
        state.foundWords = [];
        state.matchedCells.clear();
        state.wordColors.clear();
        state.isDragging = false;

        updateDOM();
      }

      // Function to handle difficulty change
      function handleDifficultyChange(e) {
        state.difficulty = e.target.value;
        generatePuzzleWithCurrentWordSet();
      }

      const gridElement = document.getElementById("grid");

      // Add cell click handler for sequential selection
      gridElement.addEventListener("click", handleCellClick);

      // Add event listener for the Confirm Selection button
      //document.getElementById("confirmSelectionBtn").addEventListener("click", handleConfirmSelection);

      // Mouse events for drag selectionPsetting
      gridElement.addEventListener("mousedown", handleDragStart);
      gridElement.addEventListener("mousemove", handleDragMove);
      document.addEventListener("mouseup", handleDragEnd);

      // Touch events
      gridElement.addEventListener("touchstart", (e) => {
        e.preventDefault();
        handleDragStart(e);
      });

      gridElement.addEventListener("touchmove", (e) => {
        e.preventDefault();
        handleDragMove(e);
      });

      gridElement.addEventListener("touchend", (e) => {
        e.preventDefault();
        handleDragEnd();
      });

      // Controls
      document.getElementById("level").addEventListener("change", handleDifficultyChange);
      document.getElementById("new").addEventListener("click", generateNewPuzzle);
      document.getElementById("shuffle").addEventListener("click", resetPuzzle);
      document.getElementById("solutionBtn").addEventListener("click", handleHelpButtonClick);
      document.getElementById("clear").addEventListener("click", handleClearButtonClick);

      // Initialize the first puzzle
      generatePuzzleWithCurrentWordSet();
    });
  </script>
</div>
