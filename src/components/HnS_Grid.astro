---
import "@/assets/styles/hns_grid.css";
const letters = Array.from({ length: 26 }, (_, i) => String.fromCharCode(65 + i));
---

<div class="container">
  <main id="main">
    {
      letters.map((letter) => (
        <div class="word" data-letter={letter}>
          <span class="letter">{letter}</span>
        </div>
      ))
    }
  </main>
</div>

<script>
  // Define vibrant solid colors pool
  const colors = [
    "#FF5252", // Red
    "#FF4081", // Pink
    "#E040FB", // Purple
    "#7C4DFF", // Deep Purple
    "#536DFE", // Indigo
    "#448AFF", // Blue
    "#03A9F4", // Light Blue
    "#00BCD4", // Cyan
    "#009688", // Teal
    "#4CAF50", // Green
    "#8BC34A", // Light Green
    "#CDDC39", // Lime
    "#FFEB3B", // Yellow
    "#FFC107", // Amber
    "#FF9800", // Orange
    "#FF5722", // Deep Orange
    "#795548", // Brown
    "#607D8B", // Blue Grey
    "#F44336", // Material Red
    "#2196F3", // Material Blue
    "#3F51B5", // Material Indigo
    "#9C27B0", // Material Purple
    "#00BFA5", // Mint
    "#D81B60", // Cranberry
    "#1E88E5", // Ocean Blue
    "#43A047" // Forest Green
  ];

  const defaultColor = "#0b1f54";
  const words = document.querySelectorAll(".word") as NodeListOf<HTMLElement>;

  // Track active letter elements
  const activeLetters = new Set();

  // Function to get a random color from the pool
  function getRandomColor() {
    return colors[Math.floor(Math.random() * colors.length)];
  }

  // Assign random hover color to each letter on interaction
  words.forEach((word) => {
    // Add hover event - generate a new random color each time
    word.addEventListener("mouseenter", () => {
      if (!word.classList.contains("active")) {
        // Assign a random color on each hover
        word.style.background = getRandomColor();
      }
    });

    word.addEventListener("mouseleave", () => {
      if (!word.classList.contains("active")) {
        word.style.background = defaultColor;
      }
    });

    // Add click functionality to toggle letter visibility
    word.addEventListener("click", () => {
      toggleLetterVisibility(word);
    });
  });

  function toggleLetterVisibility(wordElement: HTMLElement) {
    const letter = wordElement.getAttribute("data-letter");

    if (wordElement.classList.contains("active")) {
      // Hide the letter
      wordElement.classList.remove("active");
      wordElement.style.background = defaultColor;
      activeLetters.delete(letter);
    } else {
      // Show the letter with a random color
      wordElement.classList.add("active");
      // Assign a NEW random color on activation
      wordElement.style.background = getRandomColor();
      activeLetters.add(letter);
    }
  }

  function showLetter(letter: string) {
    words.forEach((word) => {
      if (word.getAttribute("data-letter") === letter.toUpperCase()) {
        toggleLetterVisibility(word);
      }
    });
  }

  // Listen for keydown events
  document.addEventListener("keydown", (e) => {
    if (/^[a-zA-Z]$/.test(e.key)) {
      showLetter(e.key);
    } else if (e.key === " " || e.code === "Space") {
      // Refresh random colors when spacebar is pressed
      e.preventDefault();
      words.forEach((word) => {
        if (word.classList.contains("active")) {
          word.style.background = getRandomColor();
        }
      });
    }
  });

  // Ensure centering on window resize and zoom
  //window.addEventListener('resize', () => {
  //  // Force reflow to maintain center alignment
  //  main.style.display = 'none';
  //  setTimeout(() => {
  //    main.style.display = 'flex';
  //  }, 10);
  //});
</script>
