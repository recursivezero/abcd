---
import vedicData from "@/data/vedic.json";

const { units } = vedicData;
---

<style>
  .converter__horizontal {
    display: flex;
    align-items: flex-end;
    gap: 1rem;
    width: 100%;
    padding: 1.5rem;
    border-radius: 1rem;
    margin-bottom: 2.5rem;
    border: 2px solid var(--border);
    background-color: color-mix(in srgb, var(--background) 97%, var(--text) 3%);

    & input {
      padding: 1rem;
    }
  }

  .converter__title {
    color: var(--text);
    font-size: 1.8rem;
    font-weight: 600;
    margin-bottom: 2.5rem;
    text-align: center;
    position: relative;
    /* Not sticky anymore if container scrolls, but good for z-index */
    z-index: 2;
    padding: 0 2rem;
    /* Add padding to title to prevent it from hugging the edge */
  }

  .form__group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    flex: 1;
  }

  .form__group label {
    color: var(--text);
    font-size: 1.25rem;
    font-weight: 500;
    padding: 0.5rem;
  }

  input,
  .unit__dropdown {
    width: 100%;
    padding: 1rem;
    border-radius: 0.75rem;
    border: 1px solid var(--border);
    background-color: var(--background);
    color: var(--text);
    font-size: 1.75rem;
    line-height: 1.25;
  }

  input:focus,
  select:focus {
    outline: none;
    border-color: var(--primary);
    box-shadow: 0 0 0 2px color-mix(in srgb, var(--primary) 30%, transparent);
  }

  .swap-button {
    width: 50px;
    height: 50px;
    border-radius: 0.75rem;
    background-color: var(--background);
    border: 2px solid var(--border);
    display: flex;
    margin-bottom: 4px;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
    flex-shrink: 0;
    transform: rotate(90deg);
  }

  .swap-button:hover {
    background-color: color-mix(in srgb, var(--background) 90%, var(--text) 10%);
  }

  .swap-button.active {
    background: linear-gradient(45deg, #ffa63d, #ff3d77, #338aff, #3cf0c5);
    background-size: 400% 400%;
    animation: gradient 10s infinite;
  }

  .swap-icon {
    width: 20px;
    height: 20px;
    fill: var(--text);
    transition: transform 0.3s ease;
  }

  .swap-button.active .swap-icon {
    fill: var(--background);
    transform: rotate(180deg);
  }

  .output__value {
    width: 99%;
    margin-left: 0.5%;
    padding: 1.5rem;
    border-radius: 0.75rem;
    background-color: color-mix(in srgb, var(--background) 95%, var(--text) 5%);
    color: #1f913c;
    text-align: center;
    font-size: 2rem;
    font-weight: 500;
    display: block;
  }
  @media (max-width: 768px) {
    .converter__horizontal {
      flex-direction: column;
      align-items: stretch;
      gap: 1rem;
    }
    .swap-button {
      margin: 0.5rem 0;
      align-self: center;
    }
    .output__value {
      padding: 1rem;
      font-size: 1.2rem;
      width: 98%;
      margin-left: 1%;
    }
  }
</style>

<div class="container__convertor">
  <h2 class="converter__title">Vedic Unit Converter</h2>
  <div class="converter__horizontal">
    <div class="form__group">
      <label for="input__value">Enter a number</label>
      <input type="number" id="input__value" placeholder="123" pattern="\d+" required />
    </div>

    <div class="form__group">
      <label for="from__unit">From</label>
      <select id="from__unit" class="unit__dropdown">
        <option disabled aria-readonly>Select Base Unit</option>
        {units.map((unit) => <option value={unit.name}>{unit.name}</option>)}
      </select>
    </div>

    <button id="swapButton" class="swap-button" aria-label="Swap units">
      <svg class="swap-icon" viewBox="0 0 24 24">
        <path fill="currentColor" d="M9 3L5 7H8V14H10V7H13M16 17V10H14V17H11L15 21L19 17H16Z"></path>
      </svg>
    </button>

    <div class="form__group">
      <label for="to__unit">To</label>
      <select id="to__unit" class="unit__dropdown">
        <option disabled aria-readonly>Select Conversion Unit</option>
        {units.map((unit) => <option value={unit.name}>{unit.name}</option>)}
      </select>
    </div>
  </div>
  <output id="result" for="from_unit to_unit" class="output__value"></output>
</div>

<script is:inline define:vars={{ units }}>
  document.addEventListener("DOMContentLoaded", () => {
    console.log("page load event");

    const inputBox = document.getElementById("input__value");
    const fromUnit = document.getElementById("from__unit");
    const toUnit = document.getElementById("to__unit");
    const outputBox = document.getElementById("result");
    const swapButton = document.getElementById("swapButton");

    const convert = (value, fromUnit, toUnit) => {
      const from = units.find((u) => u.name === fromUnit);
      const to = units.find((u) => u.name === toUnit);
      if (!from || !to) return null;
      const seconds = value * from.seconds;
      return seconds / to.seconds;
    };

    const updateResult = () => {
      console.log(inputBox.value, inputBox.valueAsNumber, fromUnit.value, toUnit.value);
      console.log(Number.isNaN(inputBox.valueAsNumber));
      if (!Number.isNaN(inputBox.valueAsNumber) && fromUnit.value && toUnit.value) {
        const value = inputBox.valueAsNumber;
        const result = convert(value, fromUnit.value, toUnit.value);
        outputBox.textContent = `${value} ${fromUnit.value} = ${result.toLocaleString(undefined, {
          maximumFractionDigits: 4
        })} ${toUnit.value}`;
      }
    };

    const swapResult = () => {
      const temp = fromUnit.value;
      fromUnit.value = toUnit.value;
      toUnit.value = temp;
      swapButton.classList.toggle("active");
      updateResult();
    };

    swapButton.addEventListener("click", swapResult);
    // Setup event listeners for converter
    if (inputBox) inputBox.addEventListener("input", updateResult);
    if (fromUnit) fromUnit.addEventListener("change", updateResult);
    if (toUnit) toUnit.addEventListener("change", updateResult);
  });
</script>
