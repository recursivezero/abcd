---
export interface Props {
  stateList: any[];
  utList: any[];
  // Removed colorPalette prop since we're now using CSS variables
  // Removed getContrastColor prop since we're using white text for all cards
}

import "@/assets/styles/capital.css";

const { stateList, utList } = Astro.props;
---

<div class="geographical-mosaic">
  <!-- Hero Section -->
  <div class="hero-section">
    <div class="hero-content">
      <h1 class="main-title">Explore India's Administrative Landscape</h1>
      <p class="hero-subtitle">Discover the diverse tapestry of states and union territories</p>
    </div>
  </div>

  <!-- Controls Bar -->
  <div class="controls-bar">
    <div class="search-container">
      <span class="search-icon">üîç</span>
      <input type="text" id="searchBar" placeholder="Search locations..." />
      <button class="clear-button">√ó</button>
    </div>
  </div>

  <!-- Mosaic Sections -->
  <div class="location-container">
    <section class="location-section states-section">
      <div class="section-header">
        <h2 class="section-title">
          <span class="icon">üèõÔ∏è</span> States of India
        </h2>
        <div class="stats-badge" id="statesCount" data-total={stateList.length}>
          {stateList.length} Total States
        </div>
      </div>

      <div class="location-grid">
        {
          stateList.map((state) => (
            <div class="location-card">
              <div class="card-inner">
                <h3 class="location-name">{state.name}</h3>
                <div class="location-details">
                  <span class="label">Capital</span>
                  <span class="value">{state.capital}</span>
                </div>
                <div class="card-overlay" />
              </div>
            </div>
          ))
        }
      </div>
    </section>

    <section class="location-section ut-section">
      <div class="section-header">
        <h2 class="section-title">
          <span class="icon">üèùÔ∏è</span> Union Territories
        </h2>
        <div class="stats-badge" id="utsCount" data-total={utList.length}>
          {utList.length} Total UTs
        </div>
      </div>

      <div class="location-grid">
        {
          utList.map((ut) => (
            <div class="location-card">
              <div class="card-inner">
                <h3 class="location-name">{ut.name}</h3>
                <div class="location-details">
                  <span class="label">Capital</span>
                  <span class="value">{ut.capital}</span>
                </div>
                <div class="card-overlay" />
              </div>
            </div>
          ))
        }
      </div>
    </section>
  </div>
</div>

<script>
  const searchBar = document.getElementById("searchBar") as HTMLInputElement;
  const clearButton = document.querySelector(".clear-button") as HTMLElement;
  const statesCountElement = document.getElementById("statesCount") as HTMLElement;
  const utsCountElement = document.getElementById("utsCount") as HTMLElement;

  const updateCounts = (query: string) => {
    const statesTotal = statesCountElement.dataset.total;
    const utsTotal = utsCountElement.dataset.total;

    if (!query) {
      statesCountElement.textContent = `${statesTotal} Total States`;
      utsCountElement.textContent = `${utsTotal} Total UTs`;
      return;
    }

    const visibleStates = document.querySelectorAll(
      '.states-section .location-card:not([style*="display: none"])'
    ).length;
    const visibleUTs = document.querySelectorAll('.ut-section .location-card:not([style*="display: none"])').length;

    statesCountElement.textContent = `${visibleStates} ${visibleStates === 1 ? "State" : "States"} Found`;
    utsCountElement.textContent = `${visibleUTs} ${visibleUTs === 1 ? "UT" : "UTs"} Found`;
  };

  searchBar.addEventListener("input", function () {
    const query = this.value.toLowerCase().trim();
    const cards = document.querySelectorAll(".location-card") as NodeListOf<HTMLElement>;

    cards.forEach((card) => {
      const name = (card.querySelector(".location-name")as any).textContent.toLowerCase();
      card.style.display = name.startsWith(query) ? "" : "none";
    });

    updateCounts(query);
  });

  clearButton.addEventListener("click", () => {
    searchBar.value = "";
    searchBar.dispatchEvent(new Event("input"));
    searchBar.focus();
  });

  // Card hover effects
  document.querySelectorAll(".location-card").forEach((card) => {
    card.addEventListener("mouseenter", () => card.classList.add("hover-effect"));
    card.addEventListener("mouseleave", () => card.classList.remove("hover-effect"));
  });
</script>