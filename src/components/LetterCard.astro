---
import type { AlphabetDataItem } from "@/types/alphabet.ts";

import "@/assets/styles/letter-card.css";

interface Props {
  class?: string;
  item: AlphabetDataItem;
  category: string;
}

const { class: className, ...rest } = Astro.props;

const { item, category } = rest as Props;
---

<div class="flip__card">
  <div class="flip__card__inner">
    <div class="card card__front">
      <div class="flip__button">
        <span class="flip__button__text" title="Flip Card">Flip Card</span>
      </div>
      <div class="letter__header">
        <p class={`character ${className ?? ""}`}>{item.letter}</p>
      </div>
      <div class="letter__content">
        <h2 class="text">{item.text}</h2>
        <p class="description">{item.description}</p>
      </div>
      <div class="card__glow"></div>
    </div>
    <div class="card card__back" style={category === "color" ? `background: ${item.code}` : ""}>
      <div class="flip__button">
        <span class="flip__button__text" title="Click to flip">Flip Card</span>
      </div>
      {
        item.image ? (
          <img src={`/assets/images/alphabets/${category}/${item.image}`} alt={item.letter} class="image" />
        ) : item.emoji ? (
          <p class="emoji">{item.emoji}</p>
        ) : (
          <p class="flipped__text">{item.text}</p>
        )
      }
    </div>
  </div>
</div>

<script>
  const cards = document.querySelectorAll(".card") as NodeListOf<HTMLElement>;
  const flipCards = document.querySelectorAll(".flip__card") as NodeListOf<HTMLElement>;
  const flipAllButton = document.getElementById("flip-all-button") as HTMLButtonElement | null;
  let allFlipped = false;

  cards.forEach((letter) => {
    letter.addEventListener("mousemove", (e: Event) => {
      const htmlLetter = letter as HTMLElement;
      const rect = htmlLetter.getBoundingClientRect();
      const event = e as MouseEvent;
      const x = ((event.clientX - rect.left) / htmlLetter.clientWidth) * 100;
      const y = ((event.clientY - rect.top) / htmlLetter.clientHeight) * 100;
      htmlLetter.style.setProperty("--mouse-x", `${x}%`);
      htmlLetter.style.setProperty("--mouse-y", `${y}%`);
    });
  });

  flipCards.forEach((card) => {
    const flipButtons = card.querySelectorAll(".flip__button") as NodeListOf<HTMLElement>;
    flipButtons.forEach((button) => {
      button.addEventListener("click", () => {
        card.classList.toggle("flipped");
      });
    });
  });

  if (flipAllButton) {
    flipAllButton.addEventListener("click", () => {
      allFlipped = !allFlipped;

      flipCards.forEach((card: HTMLElement) => {
        const flipCardElement = card;
        flipCardElement.classList.toggle("flipped", allFlipped);
        // Also toggle flip button text/icon on each card if LetterCard handles it
        const allButtonsOnThisCard = flipCardElement.querySelectorAll(".flip__button") as NodeListOf<HTMLElement>;
        allButtonsOnThisCard.forEach((btn) => {
          const textLabel = btn.querySelector(".flip-text-label") as HTMLElement;
          const symbolLabel = btn.querySelector(".rotate-symbol-label") as HTMLElement;
          if (textLabel && symbolLabel) {
            textLabel.classList.toggle("is-hidden", allFlipped);
            symbolLabel.classList.toggle("is-hidden", !allFlipped);
          }
        });
      });

      flipAllButton.textContent = allFlipped ? "Reset All Cards" : "Flip All Cards";

      flipAllButton.classList.add("active");
      setTimeout(() => {
        if (flipAllButton) {
          flipAllButton.classList.remove("active");
        }
      }, 300);
    });
  } else {
    console.warn("flip not working, flip-all-button not found");
  }
</script>
