---
import "@/assets/styles/kannada.css";

interface LetterPair {
  hindi: string;
  kannada: string;
  english: string;
  type: "vowel" | "consonant" | "separator";
}

// Generate unicode characters for Hindi and Kannada
const generateLetters = (startCode: number, length: number, extraKeys: number[] = []): string[] =>
  Array.from({ length }, (_, i) => String.fromCodePoint(startCode + i)).filter(
    (_, index) => !extraKeys.includes(startCode + index)
  );

// Updated English equivalents with more accurate transliterations
const englishVowels = ["a", "ā", "i", "ī", "u", "ū", "e", "ai", "o", "au", "aṃ", "aḥ"];

const englishConsonants = [
  "ka",
  "kha",
  "ga",
  "gha",
  "ṅa",
  "ca",
  "cha",
  "ja",
  "jha",
  "ña",
  "ṭa",
  "ṭha",
  "ḍa",
  "ḍha",
  "ṇa",
  "ta",
  "tha",
  "da",
  "dha",
  "na",
  "pa",
  "pha",
  "ba",
  "bha",
  "ma",
  "ya",
  "ra",
  "la",
  "va",
  "śa",
  "ṣa",
  "sa",
  "ha",
  "ḷa"
];

const hindiVowels = generateLetters(2309, 16, [2317, 2321]);
const hindiConsonants = generateLetters(2325, 37);
const kannadaVowels = generateLetters(3205, 16, [3213, 3217]);
const kannadaConsonants = generateLetters(3221, 37);

// Create letter pairs with all three scripts
const letterPairs: LetterPair[] = [
  ...hindiVowels.map((hindi, i) => ({
    hindi,
    kannada: kannadaVowels[i],
    english: englishVowels[i] || "",
    type: "vowel" as const
  })),
  ...hindiConsonants.map((hindi, i) => ({
    hindi,
    kannada: kannadaConsonants[i],
    english: englishConsonants[i] || "",
    type: "consonant" as const
  }))
];

const languages = [
  { code: "hi", name: "हिंदी" },
  { code: "kn", name: "ಕನ್ನಡ" },
  { code: "en", name: "English" }
];

let selectedLanguage1 = "hi";
let selectedLanguage2 = "kn";


const getLetterForLanguage = (pair: LetterPair, langCode: string): string => {
  switch (langCode) {
    case "hi":
      return pair.hindi;
    case "kn":
      return pair.kannada;
    case "en":
      return pair.english;
    default:
      return "";
  }
};




---

<div class="language-letters-container">
  <!-- Dropdown Section -->
  <div class="toggle-container">
    <div class="dropdown-wrapper">
      <label id="lang1Label" class="dropdown-label language-label active">
        {languages.find((lang) => lang.code === selectedLanguage1)?.name || ""}
      </label>
      <select id="languageDropdown1">
        {
          languages.map((lang) => (
            <option value={lang.code} selected={lang.code === selectedLanguage1}>
              {lang.name} ({lang.code.toUpperCase()})
            </option>
          ))
        }
      </select>
    </div>

    <div class="dropdown-wrapper">
      <label id="lang2Label" class="dropdown-label language-label">
        {languages.find((lang) => lang.code === selectedLanguage2)?.name || ""}
      </label>
      <select id="languageDropdown2" >
        {
          languages.map((lang) => (
            <option value={lang.code} selected={lang.code === selectedLanguage2}>
              {lang.name} ({lang.code.toUpperCase()})
            </option>
          ))
        }
      </select>
    </div>
  </div>

  <!-- Letters Grid Section -->
  <div class="language-letters-grid">
    <h2 class="group-heading" style="grid-column: 1 / -1;">VOWELS (स्वर)</h2>
    {
      letterPairs
        .filter((pair) => pair.type === "vowel")
        .map((pair, index) => (
          <div data-key={`vowel-${index}`} class="language-letter-card language-letter-card-vowel">
            <div class="language-letter-top">{getLetterForLanguage(pair, selectedLanguage1)}</div>
            <div class="language-letter-bottom">{getLetterForLanguage(pair, selectedLanguage2)}</div>
          </div>
        ))
    }

    <div class="language-letters-separator" style="grid-column: 1 / -1;"></div>

    <h2 class="group-heading" style="grid-column: 1 / -1;">CONSONANTS (व्यंजन)</h2>
    {
      letterPairs
        .filter((pair) => pair.type === "consonant")
        .map((pair, index) => (
          <div data-key={`consonant-${index}`} class="language-letter-card language-letter-card-consonant">
            <div class="language-letter-top">{getLetterForLanguage(pair, selectedLanguage1)}</div>
            <div class="language-letter-bottom">{getLetterForLanguage(pair, selectedLanguage2)}</div>
          </div>
        ))
    }
  </div>
</div>
<script>
  // Letter generation helpers
  const generateLetters = (startCode: number, length: number, extraCodes = [] as number[]) =>
    Array.from({ length }, (_, i) => String.fromCodePoint(startCode + i)).filter(
      (_, i) => !extraCodes.includes(startCode + i)
    );

  // Letter sets
  const hindiVowels = generateLetters(2309, 16, [2317, 2321]);
  const hindiConsonants = generateLetters(2325, 37);
  const kannadaVowels = generateLetters(3205, 16, [3213, 3217]);
  const kannadaConsonants = generateLetters(3221, 37);
  
  // Use correct English transliterations instead of just basic letters
  const englishVowels = ["a", "ā", "i", "ī", "u", "ū", "e", "ai", "o", "au", "aṃ", "aḥ"];
  const englishConsonants = [
    "ka", "kha", "ga", "gha", "ṅa", "ca", "cha", "ja", "jha", "ña",
    "ṭa", "ṭha", "ḍa", "ḍha", "ṇa", "ta", "tha", "da", "dha", "na","nna",
    "pa", "pha", "ba", "bha", "ma", "ya", "ra","rra", "la", "va", "śa",
    "va", "sha", "sha", "sa", "ha", "kṣa", "ha",
  ];

  const languages = [
    { code: "hi", name: "हिंदी" },
    { code: "kn", name: "ಕನ್ನಡ" },
    { code: "en", name: "English" }
  ];

  let selectedLanguage1 = "hi";
  let selectedLanguage2 = "kn";
  let isReversed = false;

  function getLetter(lang: string, type: string, index: number) {
    if (lang === "en") {
      return type === "vowel" ? englishVowels[index] || "" : englishConsonants[index] || "";
    }
    if (lang === "hi") {
      return type === "vowel" ? hindiVowels[index] || "" : hindiConsonants[index] || "";
    }
    if (lang === "kn") {
      return type === "vowel" ? kannadaVowels[index] || "" : kannadaConsonants[index] || "";
    }
    return "";
  }

  function updateGrid() {
    // Update language labels
    const lang1Label = document.getElementById("lang1Label");
    const lang2Label = document.getElementById("lang2Label");
    if (lang1Label && lang2Label) {
      lang1Label.textContent = languages.find((l) => l.code === selectedLanguage1)?.name || "";
      lang2Label.textContent = languages.find((l) => l.code === selectedLanguage2)?.name || "";
    }

    // Update all letter cards
    const vowelCards = document.querySelectorAll('.language-letter-card-vowel');
    const consonantCards = document.querySelectorAll('.language-letter-card-consonant');
    
    // Update vowels
    vowelCards.forEach((card, index) => {
      const topElement = card.querySelector('.language-letter-top');
      const bottomElement = card.querySelector('.language-letter-bottom');
      
      if (topElement && bottomElement) {
        topElement.textContent = getLetter(selectedLanguage1, "vowel", index);
        bottomElement.textContent = getLetter(selectedLanguage2, "vowel", index);
        
        // Add special styling for English text
        topElement.classList.toggle("english-text", selectedLanguage1 === "en");
        bottomElement.classList.toggle("english-text", selectedLanguage2 === "en");
        
        // Add transliteration class for proper display of diacritical marks
        topElement.classList.toggle("transliteration", selectedLanguage1 === "en");
        bottomElement.classList.toggle("transliteration", selectedLanguage2 === "en");
      }
    });
    
    // Update consonants
    consonantCards.forEach((card, index) => {
      const topElement = card.querySelector('.language-letter-top');
      const bottomElement = card.querySelector('.language-letter-bottom');
      
      if (topElement && bottomElement) {
        topElement.textContent = getLetter(selectedLanguage1, "consonant", index);
        bottomElement.textContent = getLetter(selectedLanguage2, "consonant", index);
        
        // Add special styling for English text
        topElement.classList.toggle("english-text", selectedLanguage1 === "en");
        bottomElement.classList.toggle("english-text", selectedLanguage2 === "en");
        
        // Add transliteration class for proper display of diacritical marks
        topElement.classList.toggle("transliteration", selectedLanguage1 === "en");
        bottomElement.classList.toggle("transliteration", selectedLanguage2 === "en");
      }
    });
  }

  function updateToggleLanguages() {
  const toggleButton = document.getElementById("toggleButton");
  const hindiLabel = document.getElementById("hindiLabel");
  const kannadaLabel = document.getElementById("kannadaLabel");
  
  if (!toggleButton || !hindiLabel || !kannadaLabel) return;

  // Update labels based on current dropdown selections
  const dropdown1 = document.getElementById("languageDropdown1") as HTMLSelectElement;
  const dropdown2 = document.getElementById("languageDropdown2") as HTMLSelectElement;

  if (!dropdown1 || !dropdown2) return;

  const lang1 = dropdown1.value;
  const lang2 = dropdown2.value;

  // Update toggle button labels
  const getLangName = (code: string) => {
    switch (code) {
      case "hi": return "हिंदी";
      case "kn": return "ಕನ್ನಡ";
      case "en": return "English";
      default: return "";
    }
  };

  // Set labels for toggle button
  hindiLabel.textContent = getLangName(lang2);
  kannadaLabel.textContent = getLangName(lang1);

  // Add/remove active class
  hindiLabel.classList.toggle("active", !isReversed);
  kannadaLabel.classList.toggle("active", isReversed);
}

// Modify existing event listeners to include updateToggleLanguages
document.addEventListener("DOMContentLoaded", () => {
  const dropdown1 = document.getElementById("languageDropdown1") as HTMLSelectElement;
  const dropdown2 = document.getElementById("languageDropdown2") as HTMLSelectElement;
  const toggleButton = document.getElementById("toggleButton");

  if (dropdown1) {
    dropdown1.addEventListener("change", (e: Event) => {
      selectedLanguage1 = (e.target as HTMLSelectElement).value;
      updateGrid();
      updateToggleLanguages();
    });
  }

  if (dropdown2) {
    dropdown2.addEventListener("change", (e: Event) => {
      selectedLanguage2 = (e.target as HTMLSelectElement).value;
      updateGrid();
      updateToggleLanguages();
    });
  }

  // Modify existing toggleLanguages function to update toggle button
  function toggleLanguages() {
    isReversed = !isReversed;
    
    // Toggle classes on all cards
    document.querySelectorAll(".language-letter-card").forEach((card) => {
      card.classList.toggle("reverse");
    });
    
    // Update toggle button state
    const toggleButton = document.getElementById("toggleButton");
    const hindiLabel = document.getElementById("hindiLabel");
    const kannadaLabel = document.getElementById("kannadaLabel");
    
    if (toggleButton && hindiLabel && kannadaLabel) {
      toggleButton.classList.toggle("toggled");
      toggleButton.setAttribute("aria-pressed", isReversed.toString());
      
      // Swap active class
      hindiLabel.classList.toggle("active");
      kannadaLabel.classList.toggle("active");
    }
    
    // Update the grid and toggle labels
    updateGrid();
    updateToggleLanguages();
  }

  if (toggleButton) {
    toggleButton.addEventListener("click", toggleLanguages);
  }

  // Initial render
  updateGrid();
  updateToggleLanguages();
});
</script>

