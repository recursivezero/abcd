---
import "@/assets/styles/kannada.css";

interface LetterPair {
  hindi: string;
  kannada: string;
  english: string;
  type: "vowel" | "consonant" | "separator";
}

// Generate unicode characters for Hindi and Kannada
const generateLetters = (startCode: number, length: number, extraKeys: number[] = []): string[] =>
  Array.from({ length }, (_, i) => String.fromCodePoint(startCode + i)).filter(
    (_, index) => !extraKeys.includes(startCode + index)
  );

// Updated English equivalents with more accurate transliterations
const englishVowels = ["a", "ā", "i", "ī", "u", "ū", "e", "ai", "o", "au", "aṃ", "aḥ"];

const englishConsonants = [
  "ka",
  "kha",
  "ga",
  "gha",
  "ṅa",
  "ca",
  "cha",
  "ja",
  "jha",
  "ña",
  "ṭa",
  "ṭha",
  "ḍa",
  "ḍha",
  "ṇa",
  "ta",
  "tha",
  "da",
  "dha",
  "na",
  "pa",
  "pha",
  "ba",
  "bha",
  "ma",
  "ya",
  "ra",
  "la",
  "va",
  "śa",
  "ṣa",
  "sa",
  "ha",
  "ḷa"
];

const hindiVowels = generateLetters(2309, 16, [2317, 2321]);
const hindiConsonants = generateLetters(2325, 37);
const kannadaVowels = generateLetters(3205, 16, [3213, 3217]);
const kannadaConsonants = generateLetters(3221, 37);

// Create letter pairs with all three scripts
const letterPairs: LetterPair[] = [
  ...hindiVowels.map((hindi, i) => ({
    hindi,
    kannada: kannadaVowels[i],
    english: englishVowels[i] || "",
    type: "vowel" as const
  })),
  ...hindiConsonants.map((hindi, i) => ({
    hindi,
    kannada: kannadaConsonants[i],
    english: englishConsonants[i] || "",
    type: "consonant" as const
  }))
];

const languages = [
  { code: "hi", name: "हिंदी" },
  { code: "kn", name: "ಕನ್ನಡ" },
  { code: "en", name: "English" }
];

let selectedLanguage1 = "hi";
let selectedLanguage2 = "kn";

//const getLetterForLanguage = (pair: LetterPair, langCode: string): string => {
//  switch (langCode) {
//    case "hi":
//      return pair.hindi;
//    case "kn":
//      return pair.kannada;
//    case "en":
//      return pair.english;
//    default:
//      return "";
//  }
//};

//const updateUI = () => {
//  const languageLabels = document.querySelectorAll(".language-label");
//  languageLabels[0].textContent = languages.find((lang) => lang.code === selectedLanguage1)?.name || "";
//  languageLabels[1].textContent = languages.find((lang) => lang.code === selectedLanguage2)?.name || "";

//  document.querySelectorAll(".language-letter-card").forEach((card, index) => {
//    const pair = letterPairs[index];
//    const lang1Letter = getLetterForLanguage(pair, selectedLanguage1);
//    const lang2Letter = getLetterForLanguage(pair, selectedLanguage2);

//    const lang1Element = card.querySelector(".language-letter-top");
//    const lang2Element = card.querySelector(".language-letter-bottom");

//    if (lang1Element && lang2Element) {
//      lang1Element.textContent = lang1Letter;
//      lang2Element.textContent = lang2Letter;

//      // Add special styling for English text
//      lang1Element.classList.toggle("english-text", selectedLanguage1 === "en");
//      lang2Element.classList.toggle("english-text", selectedLanguage2 === "en");

//      // Add transliteration class for proper display of diacritical marks
//      lang1Element.classList.toggle("transliteration", selectedLanguage1 === "en");
//      lang2Element.classList.toggle("transliteration", selectedLanguage2 === "en");
//    }
//  });
//};

//const handleLanguageChange = (event: Event, isFirstDropdown: boolean) => {
//  if (event.target instanceof HTMLSelectElement) {
//    if (isFirstDropdown) {
//      selectedLanguage1 = event.target.value;
//    } else {
//      selectedLanguage2 = event.target.value;
//    }
//    updateUI();
//  }
//};
---

<div class="language-letters-container">
  <!-- Dropdown Section -->
  <div class="toggle-container">
    <div class="dropdown-wrapper">
      <label class="dropdown-label">Language 1</label>
      <select id="languageDropdown1">
        {
          languages.map((lang) => (
            <option value={lang.code} selected={lang.code === selectedLanguage1}>
              {lang.name} ({lang.code.toUpperCase()})
            </option>
          ))
        }
      </select>
    </div>

    <div class="dropdown-wrapper">
      <label class="dropdown-label">Language 2</label>
      <select id="languageDropdown2">
        {
          languages.map((lang) => (
            <option value={lang.code} selected={lang.code === selectedLanguage2}>
              {lang.name} ({lang.code.toUpperCase()})
            </option>
          ))
        }
      </select>
    </div>
  </div>

  <!-- Letters Grid Section -->
  <div class="language-letters-grid">
    <h2 class="group-heading" style="grid-column: 1 / -1;">VOWELS (स्वर)</h2>
    {
      letterPairs
        .filter((pair) => pair.type === "vowel")
        .map((pair, index) => (
          <div data-key={`vowel-${index}`} class="language-letter-card language-letter-card-vowel">
            <div class="language-letter-kannada">{pair.kannada}</div>
            <div class="language-letter-hindi">{pair.hindi}</div>
            {/*<div class="language-letter-english">{pair.english}</div> */}
          </div>
        ))
    }

    <div class="language-letters-separator" style="grid-column: 1 / -1;"></div>

    <h2 class="group-heading" style="grid-column: 1 / -1;">CONSONANTS (व्यंजन)</h2>
    {
      letterPairs
        .filter((pair) => pair.type === "consonant")
        .map((pair, index) => (
          <div data-key={`consonant-${index}`} class="language-letter-card language-letter-card-consonant">
            <div class="language-letter-kannada">{pair.kannada}</div>
            <div class="language-letter-hindi">{pair.hindi}</div>
          </div>
        ))
    }
  </div>
</div>
<script>
  // Letter generation helpers
  const generateLetters = (startCode: number, length: number, extraCodes = [] as number[]) =>
    Array.from({ length }, (_, i) => String.fromCodePoint(startCode + i)).filter(
      (_, i) => !extraCodes.includes(startCode + i)
    );

  // Letter sets
  const hindiVowels = generateLetters(2309, 16, [2317, 2321]);
  const hindiConsonants = generateLetters(2325, 37);
  const kannadaVowels = generateLetters(3205, 16, [3213, 3217]);
  const kannadaConsonants = generateLetters(3221, 37);
  const englishVowels = ["A", "E", "I", "O", "U"];
  const englishConsonants = Array.from("BCDFGHJKLMNPQRSTVWXYZ");

  const languages = [
    { code: "hi", name: "हिंदी" },
    { code: "kn", name: "ಕನ್ನಡ" },
    { code: "en", name: "English" }
  ];

  let selectedLanguage1 = "hi";
  let selectedLanguage2 = "kn";

  function getLetter(lang: string, type: string, index: number) {
    if (lang === "en") {
      return type === "vowel" ? englishVowels[index] || "" : englishConsonants[index] || "";
    }
    if (lang === "hi") {
      return type === "vowel" ? hindiVowels[index] || "" : hindiConsonants[index] || "";
    }
    if (lang === "kn") {
      return type === "vowel" ? kannadaVowels[index] || "" : kannadaConsonants[index] || "";
    }
    return "";
  }

  function updateGrid() {
    // Update toggle button labels
    const hindiLabel = document.getElementById("hindiLabel");
    const kannadaLabel = document.getElementById("kannadaLabel");
    if (hindiLabel && kannadaLabel) {
      hindiLabel.textContent = languages.find((l) => l.code === selectedLanguage1)?.name || "";
      kannadaLabel.textContent = languages.find((l) => l.code === selectedLanguage2)?.name || "";
    }

    // Update vowels
    const vowelsContainer = document.getElementById("vowelsContainer");
    if (vowelsContainer) {
      vowelsContainer.innerHTML = "";
      const vowelCount = Math.max(
        selectedLanguage1 === "en"
          ? englishVowels.length
          : selectedLanguage1 === "hi"
            ? hindiVowels.length
            : kannadaVowels.length,
        selectedLanguage2 === "en"
          ? englishVowels.length
          : selectedLanguage2 === "hi"
            ? hindiVowels.length
            : kannadaVowels.length
      );

      for (let i = 0; i < vowelCount; i++) {
        const card = document.createElement("div");
        card.className = "language-letter-card language-letter-card-vowel";

        const firstDiv = document.createElement("div");
        firstDiv.className = "language-letter-first";
        firstDiv.textContent = getLetter(selectedLanguage1, "vowel", i);

        const secondDiv = document.createElement("div");
        secondDiv.className = "language-letter-second";
        secondDiv.textContent = getLetter(selectedLanguage2, "vowel", i);

        card.append(firstDiv, secondDiv);
        vowelsContainer.appendChild(card);
      }
    }

    // Update consonants
    const consonantsContainer = document.getElementById("consonantsContainer");
    if (consonantsContainer) {
      consonantsContainer.innerHTML = "";
      const consonantCount = Math.max(
        selectedLanguage1 === "en"
          ? englishConsonants.length
          : selectedLanguage1 === "hi"
            ? hindiConsonants.length
            : kannadaConsonants.length,
        selectedLanguage2 === "en"
          ? englishConsonants.length
          : selectedLanguage2 === "hi"
            ? hindiConsonants.length
            : kannadaConsonants.length
      );

      for (let i = 0; i < consonantCount; i++) {
        const card = document.createElement("div");
        card.className = "language-letter-card language-letter-card-consonant";

        const firstDiv = document.createElement("div");
        firstDiv.className = "language-letter-first";
        firstDiv.textContent = getLetter(selectedLanguage1, "consonant", i);

        const secondDiv = document.createElement("div");
        secondDiv.className = "language-letter-second";
        secondDiv.textContent = getLetter(selectedLanguage2, "consonant", i);

        card.append(firstDiv, secondDiv);
        consonantsContainer.appendChild(card);
      }
    }
  }

  // Set up event listeners
  document.addEventListener("DOMContentLoaded", () => {
    const dropdown1 = document.getElementById("languageDropdown1") as HTMLElement;
    const dropdown2 = document.getElementById("languageDropdown2") as HTMLElement;
    const toggleButton = document.getElementById("toggleButton") as HTMLButtonElement;

    if (dropdown1) {
      dropdown1.addEventListener("change", (e: any) => {
        selectedLanguage1 = e.target.value;
        updateGrid();
      });
    }

    if (dropdown2) {
      dropdown2.addEventListener("change", (e: any) => {
        selectedLanguage2 = e.target.value;
        updateGrid();
      });
    }

    if (toggleButton) {
      toggleButton.addEventListener("click", () => {
        toggleButton.classList.toggle("toggled");
        document.querySelectorAll(".language-letter-card").forEach((card) => {
          card.classList.toggle("reverse");
        });

        const hindiLabel = document.getElementById("hindiLabel");
        const kannadaLabel = document.getElementById("kannadaLabel");
        if (hindiLabel && kannadaLabel) {
          hindiLabel.classList.toggle("active");
          kannadaLabel.classList.toggle("active");
        }
      });
    }

    // Initial render
    updateGrid();
  });
</script>

<style>
  /* Dropdown Container */
  .toggle-container {
    display: flex;
    justify-content: center;
    gap: 2rem;
    /*margin-bottom: 1rem;*/
    position: relative;
    z-index: 2;
    flex-wrap: wrap;
  }

  /* Dropdown Wrapper */
  .dropdown-wrapper {
    position: relative;
    min-width: 240px;
    margin: 0.5rem;
  }

  /* Dropdown Label */
  .dropdown-label {
    display: block;
    margin-bottom: 0.8rem;
    font-size: 1.1rem;
    color: #2dd4bf;
    /*color:#1d4ed8;*/
    text-transform: uppercase;
    letter-spacing: 1px;
    font-weight: 600;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  /* Dropdown Select */
  .toggle-container select {
    width: 100%;
    padding: 1rem 2.5rem 1rem 1.5rem;
    font-size: 1.1rem;
    border: 2px solid rgba(125, 211, 252, 0.3);
    border-radius: 12px;
    background: linear-gradient(145deg, #1d4ed8, #123085);
    color: white;
    cursor: pointer;
    appearance: none;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    box-shadow:
      0 4px 6px -1px rgba(0, 0, 0, 0.1),
      0 2px 4px -1px rgba(0, 0, 0, 0.06);
  }

  /* Custom Dropdown Arrow */
  .toggle-container select {
    background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='white'%3e%3cpath d='M7 10l5 5 5-5z'/%3e%3c/svg%3e");
    background-repeat: no-repeat;
    background-position: right 1rem center;
    background-size: 1.5em;
  }

  /* Hover Effects */
  .toggle-container select:hover {
    border-color: #7dd3fc;
    transform: translateY(-1px);
    box-shadow:
      0 10px 15px -3px rgba(0, 0, 0, 0.1),
      0 4px 6px -2px rgba(0, 0, 0, 0.05);
  }

  /* Focus State */
  .toggle-container select:focus {
    outline: none;
    border-color: #2dd4bf;
    box-shadow: 0 0 0 3px rgba(45, 212, 191, 0.3);
  }

  /* Option Styling */
  .toggle-container select option {
    padding: 1rem;
    background: #1e293b;
    color: #f8fafc;
    border-bottom: 1px solid rgba(125, 211, 252, 0.1);
  }

  .toggle-container select option:checked {
    background: rgba(29, 78, 216, 0.5);
    font-weight: 600;
  }

  /* Responsive Design */
  @media (max-width: 640px) {
    .toggle-container {
      flex-direction: column;
      gap: 1rem;
    }

    .dropdown-wrapper {
      width: 100%;
      min-width: auto;
    }

    .toggle-container select {
      font-size: 1rem;
      padding: 0.8rem 2rem 0.8rem 1rem;
    }
  }
</style>
