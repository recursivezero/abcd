---
interface LetterPath {
  d: string;
  animationDelay: string;
}
interface LetterData {
  paths: LetterPath[];
  instructions: string[];
}
interface LetterMap {
  [letter: string]: LetterData;
}

export interface Props {
  currentLetter?: string;
}

const { currentLetter: propLetter = "A" } = Astro.props;

const letterMap: LetterMap = {
  A: {
    paths: [
      { d: "M50,170 L100,30", animationDelay: "0s" },
      { d: "M100,30 L150,170", animationDelay: "1s" },
      { d: "M70,120 L130,120", animationDelay: "2s" }
    ],
    instructions: [
      "Draw a slant line up from bottom left to the top.",
      "Draw a slant line down from top to bottom right.",
      "Draw a line across the middle."
    ]
  },
  B: {
    paths: [
      { d: "M60,30 L60,170", animationDelay: "0s" },
      { d: "M60,30 Q130,55 60,100", animationDelay: "1s" },
      { d: "M60,100 Q130,140 60,170", animationDelay: "2s" }
    ],
    instructions: ["Draw a straight line down.", "Curve from top to middle.", "Curve from middle to bottom."]
  },
  C: {
    paths: [{ d: "M140,50 Q70,30 70,100 Q70,170 140,150", animationDelay: "0s" }],
    instructions: ["Start at the top right, curve left and down, ending at bottom right."]
  },
  D: {
    paths: [
      { d: "M60,30 L60,170", animationDelay: "0s" },
      { d: "M60,30 Q150,100 60,170", animationDelay: "1s" }
    ],
    instructions: ["Draw a straight line down.", "Curve from top to bottom."]
  },
  E: {
    paths: [
      { d: "M130,30 L60,30 L60,170 L130,170", animationDelay: "0s" },
      { d: "M60,100 L120,100", animationDelay: "1.5s" }
    ],
    instructions: ["Draw top, left, and bottom lines.", "Draw the middle line."]
  },
  F: {
    paths: [
      { d: "M130,30 L60,30 L60,170", animationDelay: "0s" },
      { d: "M60,100 L120,100", animationDelay: "1.5s" }
    ],
    instructions: ["Draw top and left lines.", "Draw the middle line."]
  },
  G: {
    paths: [{ d: "M140,50 Q70,30 70,100 Q70,170 140,150 Q130,120 110,120", animationDelay: "0s" }],
    instructions: ["Curve from top right to bottom right, then a short line inward."]
  },
  H: {
    paths: [
      { d: "M60,30 L60,170", animationDelay: "0s" },
      { d: "M140,30 L140,170", animationDelay: "1s" },
      { d: "M60,100 L140,100", animationDelay: "2s" }
    ],
    instructions: ["Draw the left line.", "Draw the right line.", "Draw the middle line."]
  },
  I: {
    paths: [
      { d: "M100,30 L100,170", animationDelay: "0s" },
      { d: "M80,30 L120,30", animationDelay: "1s" },
      { d: "M80,170 L120,170", animationDelay: "2s" }
    ],
    instructions: ["Draw the vertical line.", "Draw the top line.", "Draw the bottom line."]
  },
  J: {
    paths: [{ d: "M140,30 L140,140 Q140,170 100,170 Q60,170 60,140", animationDelay: "0s" }],
    instructions: ["Draw the top line and curve down to the left."]
  },
  K: {
    paths: [
      { d: "M60,30 L60,170", animationDelay: "0s" },
      { d: "M60,100 L140,30", animationDelay: "1s" },
      { d: "M60,100 L140,170", animationDelay: "2s" }
    ],
    instructions: ["Draw the vertical line.", "Draw the upper diagonal.", "Draw the lower diagonal."]
  },
  L: {
    paths: [{ d: "M60,30 L60,170 L130,170", animationDelay: "0s" }],
    instructions: ["Draw the vertical and bottom lines."]
  },
  M: {
    paths: [{ d: "M60,170 L60,30 L100,100 L140,30 L140,170", animationDelay: "0s" }],
    instructions: ["Draw up, down to middle, up, and down again."]
  },
  N: {
    paths: [{ d: "M60,170 L60,30 L140,170 L140,30", animationDelay: "0s" }],
    instructions: ["Draw up, diagonal down, and up again."]
  },
  O: {
    paths: [{ d: "M100,30 Q60,30 60,100 Q60,170 100,170 Q140,170 140,100 Q140,30 100,30", animationDelay: "0s" }],
    instructions: ["Draw a big oval."]
  },
  P: {
    paths: [
      { d: "M60,170 L60,30", animationDelay: "0s" },
      { d: "M60,30 Q130,55 60,100", animationDelay: "1s" }
    ],
    instructions: ["Draw a straight line up.", "Curve from top to middle."]
  },
  Q: {
    paths: [
      { d: "M100,30 Q60,30 60,100 Q60,170 100,170 Q140,170 140,100 Q140,30 100,30", animationDelay: "0s" },
      { d: "M120,140 L150,170", animationDelay: "1.5s" }
    ],
    instructions: ["Draw a big oval.", "Draw a small diagonal line at the bottom right."]
  },
  R: {
    paths: [
      { d: "M60,170 L60,30", animationDelay: "0s" },
      { d: "M60,30 Q130,55 60,100", animationDelay: "1s" },
      { d: "M60,100 L140,170", animationDelay: "2s" }
    ],
    instructions: ["Draw a straight line up.", "Curve from top to middle.", "Draw a diagonal down."]
  },
  S: {
    paths: [
      { d: "M140,50 C140,30 60,30 60,70", animationDelay: "0s" },
      { d: "M60,70 C60,110 140,110 140,150", animationDelay: "1s" },
      { d: "M140,150 C140,170 60,170 60,130", animationDelay: "2s" }
    ],
    instructions: ["Start at the top right, curve to the left.", "Curve to the right.", "Curve to the left to finish."]
  },
  T: {
    paths: [
      { d: "M60,30 L140,30", animationDelay: "0s" },
      { d: "M100,30 L100,170", animationDelay: "1s" }
    ],
    instructions: ["Draw the top line.", "Draw the vertical line."]
  },
  U: {
    paths: [{ d: "M60,30 L60,140 Q60,170 100,170 Q140,170 140,140 L140,30", animationDelay: "0s" }],
    instructions: ["Draw down, curve at the bottom, and up."]
  },
  V: {
    paths: [{ d: "M60,30 L100,170 L140,30", animationDelay: "0s" }],
    instructions: ["Draw down to the bottom and up again."]
  },
  W: {
    paths: [{ d: "M60,30 L80,170 L100,100 L120,170 L140,30", animationDelay: "0s" }],
    instructions: ["Draw down, up, down, and up again."]
  },
  X: {
    paths: [
      { d: "M60,30 L140,170", animationDelay: "0s" },
      { d: "M140,30 L60,170", animationDelay: "1s" }
    ],
    instructions: ["Draw one diagonal.", "Draw the other diagonal."]
  },
  Y: {
    paths: [
      { d: "M60,30 L100,100 L140,30", animationDelay: "0s" },
      { d: "M100,100 L100,170", animationDelay: "1s" }
    ],
    instructions: ["Draw the upper branches.", "Draw the vertical line."]
  },
  Z: {
    paths: [{ d: "M60,30 L140,30 L60,170 L140,170", animationDelay: "0s" }],
    instructions: ["Draw the top, diagonal, and bottom lines."]
  }
};

const alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".split("");
let validatedLetter = propLetter.toUpperCase();
if (!letterMap[validatedLetter]) validatedLetter = "A";
const currentLetter = validatedLetter;
const letterData = letterMap[currentLetter];
---

<div class="letter-container">
  <div class="letter-display">
    <svg class="letter-svg" viewBox="0 0 200 200" id="letter-svg">
      {
        letterData.paths.map((path) => (
          <path class="letter-path" d={path.d} style={`animation-delay: ${path.animationDelay}`} />
        ))
      }
    </svg>
  </div>

  <div class="controls">
    <button id="prev-btn" aria-label="Previous Letter">Previous</button>
    <button id="restart-btn" aria-label="Restart Animation">Restart Animation</button>
    <button id="next-btn" aria-label="Next Letter">Next</button>
  </div>

  <div class="alphabet-nav" id="alphabet-nav">
    {
      alphabet.map((l) => (
        <button class="letter-btn" data-letter={l} aria-label={`Show letter ${l}`}>
          {l}
        </button>
      ))
    }
  </div>

  <div class="instructions">
    <h2 id="instructions-title"></h2>
    <ol id="instructions-list"></ol>
  </div>
</div>

<!-- Pass data to client script -->
<script define:vars={{ currentLetter, letterMap }} is:inline>
  document.addEventListener("DOMContentLoaded", function () {
    const alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".split("");
    let current = currentLetter;
    const svg = document.getElementById("letter-svg");
    const prevBtn = document.getElementById("prev-btn");
    const nextBtn = document.getElementById("next-btn");
    const restartBtn = document.getElementById("restart-btn");
    const instructionsTitle = document.getElementById("instructions-title");
    const instructionsList = document.getElementById("instructions-list");
    const letterNav = document.getElementById("alphabet-nav");

    function updateURL(letter) {
      const params = new URLSearchParams(window.location.search);
      params.set("letter", letter);
      window.history.replaceState({}, "", window.location.pathname + "?" + params);
    }

    function updateActiveButton() {
      if (!letterNav) return;
      letterNav.querySelectorAll(".letter-btn").forEach((btn) => {
        if (btn.getAttribute("data-letter") === current) {
          btn.classList.add("current-letter");
        } else {
          btn.classList.remove("current-letter");
        }
      });
    }

    function render() {
      if (!letterMap[current]) return;
      const letterData = letterMap[current];

      // SVG paths
      if (svg) {
        svg.innerHTML = "";
        letterData.paths.forEach((path) => {
          const p = document.createElementNS("http://www.w3.org/2000/svg", "path");
          p.setAttribute("d", path.d);
          p.setAttribute("class", "letter-path");
          p.setAttribute("style", "animation-delay: " + path.animationDelay);
          svg.appendChild(p);
        });
        // Remove animation class, force reflow, then add to trigger animation
        const paths = svg.querySelectorAll(".letter-path");
        paths.forEach((p) => p.classList.remove("animate-letter"));
        void svg.offsetWidth;
        void svg.offsetHeight;
        setTimeout(() => {
          paths.forEach((p) => p.classList.add("animate-letter"));
        }, 0);
      }

      // Instructions
      if (instructionsTitle) {
        instructionsTitle.textContent = "How to Write the Letter '" + current + "'";
      }
      if (instructionsList) {
        instructionsList.innerHTML = "";
        letterData.instructions.forEach((ins) => {
          const li = document.createElement("li");
          li.textContent = ins;
          instructionsList.appendChild(li);
        });
      }
      updateActiveButton();
    }

    // Attach click handlers to alphabet buttons
    if (letterNav) {
      letterNav.querySelectorAll(".letter-btn").forEach((btn) => {
        btn.addEventListener("click", function () {
          const l = btn.getAttribute("data-letter");
          if (l && l !== current && letterMap[l]) {
            current = l;
            updateURL(l);
            render();
          }
        });
      });
    }

    if (prevBtn) {
      prevBtn.onclick = () => {
        let idx = alphabet.indexOf(current);
        current = alphabet[(idx - 1 + alphabet.length) % alphabet.length];
        if (letterMap[current]) {
          updateURL(current);
          render();
        }
      };
    }

    if (nextBtn) {
      nextBtn.onclick = () => {
        let idx = alphabet.indexOf(current);
        current = alphabet[(idx + 1) % alphabet.length];
        if (letterMap[current]) {
          updateURL(current);
          render();
        }
      };
    }

    if (restartBtn) {
      restartBtn.onclick = () => {
        if (svg) {
          svg.querySelectorAll(".letter-path").forEach((p) => {
            p.classList.remove("animate-letter");
          });
          void svg.offsetWidth;
          svg.querySelectorAll(".letter-path").forEach((p) => {
            p.classList.add("animate-letter");
          });
        }
      };
    }

    // Initialize with proper active state and render all UI client-side
    render();
    // Trigger animation for initial letter after DOM is painted
    setTimeout(() => render(), 0);
  });
</script>

<style>
  .letter-container {
    background-color: #cfe2f2;
    border-radius: 25px;
    box-shadow: 0 12px 35px rgba(0, 0, 0, 0.18);
    padding: 35px;
    width: 95%;
    max-width: 1050px;
    margin: 35px auto;
    text-align: center;
    transition: all 0.3s ease-in-out;
  }
  .letter-container:hover {
    transform: translateY(-3px);
    box-shadow: 0 15px 40px rgba(0, 0, 0, 0.22);
  }
  .letter-display {
    height: 380px;
    display: flex;
    justify-content: center;
    align-items: center;
    margin: 20px 0;
  }
  .letter-svg {
    width: 300px;
    height: 300px;
  }
  :global(.letter-path) {
    fill: none;
    stroke: #ff6b6b;
    stroke-width: 8;
    stroke-linecap: round;
    stroke-linejoin: round;
    stroke-dasharray: 1000;
    stroke-dashoffset: 1000;
    animation: none;
  }
  :global(.animate-letter) {
    animation: draw 1.5s linear forwards;
  }
  @keyframes draw {
    from {
      stroke-dashoffset: 1000;
    }
    to {
      stroke-dashoffset: 0;
    }
  }
  .controls {
    display: flex;
    justify-content: center;
    gap: 15px;
    margin-top: 18px;
    flex-wrap: wrap;
  }
  button {
    background: #2979ff;
    color: white;
    border: none;
    padding: 14px 26px;
    font-size: 1.1rem;
    border-radius: 55px;
    cursor: pointer;
    font-family: inherit;
    font-weight: 600;
    transition: all 0.3s ease;
    box-shadow: 0 5px 12px rgba(41, 121, 255, 0.25);
  }

  button:hover {
    background: #1e60c9;
    transform: translateY(-3px);
    box-shadow: 0 7px 18px rgba(41, 121, 255, 0.35);
  }

  button:active {
    transform: translateY(1px);
    box-shadow: 0 3px 8px rgba(41, 121, 255, 0.25);
  }

  .alphabet-nav {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: 8px;
    margin-top: 20px;
    margin-bottom: 12px;
    max-width: 950px;
  }

  .letter-btn {
    width: 45px;
    height: 45px;
    display: flex;
    justify-content: center;
    align-items: center;
    background: #64b5f6;
    color: white;
    font-size: 1.4rem;
    font-weight: bold;
    border-radius: 12px;
    cursor: pointer;
    transition: all 0.2s ease;
    border: none;
  }
  .letter-btn:focus {
    outline: none;
    box-shadow: 0 0 0 2px #06d6a0aa;
  }
  .letter-btn.current-letter {
    background: #ffd166;
    color: #333;
    transform: scale(1.11);
    font-weight: 900;
    box-shadow: 0 0 0 2px #ffd16655;
    outline: none;
  }
  .letter-btn.current-letter:focus {
    box-shadow:
      0 0 0 2px #ffd16655,
      0 0 0 4px #ffd16633;
  }
  .letter-btn:hover {
    background: #05b888;
    transform: scale(1.08);
  }
  .instructions {
    background: #e3f2fd;
    border-radius: 22px;
    padding: 25px;
    width: 95%;
    max-width: 750px;
    box-shadow: 0 12px 35px rgba(0, 0, 0, 0.09);
    margin: 0 auto 12px;
  }

  .instructions h2 {
    color: #1565c0;
    margin-bottom: 15px;
    text-align: center;
    font-size: 1.4rem;
  }

  .instructions ol {
    padding-left: 30px;
    font-size: 1.1rem;
    line-height: 1.6;
    text-align: left;
    color: #333;
  }

  .instructions li {
    margin-bottom: 8px;
  }

  @media (max-width: 600px) {
    .letter-svg {
      width: 180px;
      height: 180px;
    }
    .letter-display {
      height: 220px;
    }
    .letter-btn {
      width: 28px;
      height: 28px;
      font-size: 1rem;
    }
    .letter-container,
    .instructions {
      padding: 10px;
    }
  }
</style>
